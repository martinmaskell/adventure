#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Maskell.Adventure.DataAccess.CommandData.dbml
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Adventure")]
	public partial class CommandDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCommand(Command instance);
    partial void UpdateCommand(Command instance);
    partial void DeleteCommand(Command instance);
    partial void InsertDependency(Dependency instance);
    partial void UpdateDependency(Dependency instance);
    partial void DeleteDependency(Dependency instance);
    partial void InsertCommandParameterType(CommandParameterType instance);
    partial void UpdateCommandParameterType(CommandParameterType instance);
    partial void DeleteCommandParameterType(CommandParameterType instance);
    partial void InsertParameterType(ParameterType instance);
    partial void UpdateParameterType(ParameterType instance);
    partial void DeleteParameterType(ParameterType instance);
    partial void InsertAction(Action instance);
    partial void UpdateAction(Action instance);
    partial void DeleteAction(Action instance);
    partial void InsertCommandActionAction(CommandActionAction instance);
    partial void UpdateCommandActionAction(CommandActionAction instance);
    partial void DeleteCommandActionAction(CommandActionAction instance);
    partial void InsertCommandActionParameter(CommandActionParameter instance);
    partial void UpdateCommandActionParameter(CommandActionParameter instance);
    partial void DeleteCommandActionParameter(CommandActionParameter instance);
    partial void InsertCommandActionDependency(CommandActionDependency instance);
    partial void UpdateCommandActionDependency(CommandActionDependency instance);
    partial void DeleteCommandActionDependency(CommandActionDependency instance);
    partial void InsertCommandAction(CommandAction instance);
    partial void UpdateCommandAction(CommandAction instance);
    partial void DeleteCommandAction(CommandAction instance);
    #endregion
		
		public CommandDataDataContext() : 
				base(global::Maskell.Adventure.DataAccess.CommandData.Properties.Settings.Default.AdventureConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public CommandDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CommandDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CommandDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CommandDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Command> Commands
		{
			get
			{
				return this.GetTable<Command>();
			}
		}
		
		public System.Data.Linq.Table<Dependency> Dependencies
		{
			get
			{
				return this.GetTable<Dependency>();
			}
		}
		
		public System.Data.Linq.Table<CommandParameterType> CommandParameterTypes
		{
			get
			{
				return this.GetTable<CommandParameterType>();
			}
		}
		
		public System.Data.Linq.Table<ParameterType> ParameterTypes
		{
			get
			{
				return this.GetTable<ParameterType>();
			}
		}
		
		public System.Data.Linq.Table<Action> Actions
		{
			get
			{
				return this.GetTable<Action>();
			}
		}
		
		public System.Data.Linq.Table<CommandActionAction> CommandActionActions
		{
			get
			{
				return this.GetTable<CommandActionAction>();
			}
		}
		
		public System.Data.Linq.Table<CommandActionParameter> CommandActionParameters
		{
			get
			{
				return this.GetTable<CommandActionParameter>();
			}
		}
		
		public System.Data.Linq.Table<CommandActionDependency> CommandActionDependencies
		{
			get
			{
				return this.GetTable<CommandActionDependency>();
			}
		}
		
		public System.Data.Linq.Table<CommandAction> CommandActions
		{
			get
			{
				return this.GetTable<CommandAction>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="LogicData.GetCommandAction")]
		public ISingleResult<CommandAction> GetCommandAction([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CommandTypeId", DbType="Int")] System.Nullable<int> commandTypeId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FirstParameterId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> firstParameterId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SecondParameterId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> secondParameterId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ThirdParameterId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> thirdParameterId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FourthParameterId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> fourthParameterId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GameId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> gameId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), commandTypeId, firstParameterId, secondParameterId, thirdParameterId, fourthParameterId, gameId);
			return ((ISingleResult<CommandAction>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="LogicData.Command")]
	public partial class Command : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommandID;
		
		private int _CommandTypeID;
		
		private EntitySet<CommandParameterType> _CommandParameterTypes;
		
		private EntitySet<CommandAction> _CommandActions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommandIDChanging(int value);
    partial void OnCommandIDChanged();
    partial void OnCommandTypeIDChanging(int value);
    partial void OnCommandTypeIDChanged();
    #endregion
		
		public Command()
		{
			this._CommandParameterTypes = new EntitySet<CommandParameterType>(new Action<CommandParameterType>(this.attach_CommandParameterTypes), new Action<CommandParameterType>(this.detach_CommandParameterTypes));
			this._CommandActions = new EntitySet<CommandAction>(new Action<CommandAction>(this.attach_CommandActions), new Action<CommandAction>(this.detach_CommandActions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommandID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CommandID
		{
			get
			{
				return this._CommandID;
			}
			set
			{
				if ((this._CommandID != value))
				{
					this.OnCommandIDChanging(value);
					this.SendPropertyChanging();
					this._CommandID = value;
					this.SendPropertyChanged("CommandID");
					this.OnCommandIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommandTypeID", DbType="Int NOT NULL")]
		public int CommandTypeID
		{
			get
			{
				return this._CommandTypeID;
			}
			set
			{
				if ((this._CommandTypeID != value))
				{
					this.OnCommandTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CommandTypeID = value;
					this.SendPropertyChanged("CommandTypeID");
					this.OnCommandTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Command_CommandParameterType", Storage="_CommandParameterTypes", ThisKey="CommandID", OtherKey="CommandID")]
		public EntitySet<CommandParameterType> CommandParameterTypes
		{
			get
			{
				return this._CommandParameterTypes;
			}
			set
			{
				this._CommandParameterTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Command_CommandAction", Storage="_CommandActions", ThisKey="CommandID", OtherKey="CommandID")]
		public EntitySet<CommandAction> CommandActions
		{
			get
			{
				return this._CommandActions;
			}
			set
			{
				this._CommandActions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommandParameterTypes(CommandParameterType entity)
		{
			this.SendPropertyChanging();
			entity.Command = this;
		}
		
		private void detach_CommandParameterTypes(CommandParameterType entity)
		{
			this.SendPropertyChanging();
			entity.Command = null;
		}
		
		private void attach_CommandActions(CommandAction entity)
		{
			this.SendPropertyChanging();
			entity.Command = this;
		}
		
		private void detach_CommandActions(CommandAction entity)
		{
			this.SendPropertyChanging();
			entity.Command = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="LogicData.Dependency")]
	public partial class Dependency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DependencyID;
		
		private int _DependencyTypeID;
		
		private System.Nullable<System.Guid> _DependencyElementID;
		
		private string _DependencyElementKey;
		
		private string _DependencyElementValue;
		
		private EntitySet<CommandActionDependency> _CommandActionDependencies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDependencyIDChanging(int value);
    partial void OnDependencyIDChanged();
    partial void OnDependencyTypeIDChanging(int value);
    partial void OnDependencyTypeIDChanged();
    partial void OnDependencyElementIDChanging(System.Nullable<System.Guid> value);
    partial void OnDependencyElementIDChanged();
    partial void OnDependencyElementKeyChanging(string value);
    partial void OnDependencyElementKeyChanged();
    partial void OnDependencyElementValueChanging(string value);
    partial void OnDependencyElementValueChanged();
    #endregion
		
		public Dependency()
		{
			this._CommandActionDependencies = new EntitySet<CommandActionDependency>(new Action<CommandActionDependency>(this.attach_CommandActionDependencies), new Action<CommandActionDependency>(this.detach_CommandActionDependencies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DependencyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DependencyID
		{
			get
			{
				return this._DependencyID;
			}
			set
			{
				if ((this._DependencyID != value))
				{
					this.OnDependencyIDChanging(value);
					this.SendPropertyChanging();
					this._DependencyID = value;
					this.SendPropertyChanged("DependencyID");
					this.OnDependencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DependencyTypeID", DbType="Int NOT NULL")]
		public int DependencyTypeID
		{
			get
			{
				return this._DependencyTypeID;
			}
			set
			{
				if ((this._DependencyTypeID != value))
				{
					this.OnDependencyTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DependencyTypeID = value;
					this.SendPropertyChanged("DependencyTypeID");
					this.OnDependencyTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DependencyElementID", DbType="UniqueIdentifier NOT NULL")]
		public System.Nullable<System.Guid> DependencyElementID
		{
			get
			{
				return this._DependencyElementID;
			}
			set
			{
				if ((this._DependencyElementID != value))
				{
					this.OnDependencyElementIDChanging(value);
					this.SendPropertyChanging();
					this._DependencyElementID = value;
					this.SendPropertyChanged("DependencyElementID");
					this.OnDependencyElementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DependencyElementKey", DbType="VarChar(50) NOT NULL")]
		public string DependencyElementKey
		{
			get
			{
				return this._DependencyElementKey;
			}
			set
			{
				if ((this._DependencyElementKey != value))
				{
					this.OnDependencyElementKeyChanging(value);
					this.SendPropertyChanging();
					this._DependencyElementKey = value;
					this.SendPropertyChanged("DependencyElementKey");
					this.OnDependencyElementKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DependencyElementValue", DbType="VarChar(50)")]
		public string DependencyElementValue
		{
			get
			{
				return this._DependencyElementValue;
			}
			set
			{
				if ((this._DependencyElementValue != value))
				{
					this.OnDependencyElementValueChanging(value);
					this.SendPropertyChanging();
					this._DependencyElementValue = value;
					this.SendPropertyChanged("DependencyElementValue");
					this.OnDependencyElementValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dependency_CommandActionDependency", Storage="_CommandActionDependencies", ThisKey="DependencyID", OtherKey="DependencyID")]
		public EntitySet<CommandActionDependency> CommandActionDependencies
		{
			get
			{
				return this._CommandActionDependencies;
			}
			set
			{
				this._CommandActionDependencies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommandActionDependencies(CommandActionDependency entity)
		{
			this.SendPropertyChanging();
			entity.Dependency = this;
		}
		
		private void detach_CommandActionDependencies(CommandActionDependency entity)
		{
			this.SendPropertyChanging();
			entity.Dependency = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="LogicData.CommandParameterType")]
	public partial class CommandParameterType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommandID;
		
		private int _ParameterTypeID;
		
		private int _CommandParameterOrder;
		
		private EntityRef<Command> _Command;
		
		private EntityRef<ParameterType> _ParameterType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommandIDChanging(int value);
    partial void OnCommandIDChanged();
    partial void OnParameterTypeIDChanging(int value);
    partial void OnParameterTypeIDChanged();
    partial void OnCommandParameterOrderChanging(int value);
    partial void OnCommandParameterOrderChanged();
    #endregion
		
		public CommandParameterType()
		{
			this._Command = default(EntityRef<Command>);
			this._ParameterType = default(EntityRef<ParameterType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommandID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CommandID
		{
			get
			{
				return this._CommandID;
			}
			set
			{
				if ((this._CommandID != value))
				{
					if (this._Command.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommandIDChanging(value);
					this.SendPropertyChanging();
					this._CommandID = value;
					this.SendPropertyChanged("CommandID");
					this.OnCommandIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ParameterTypeID
		{
			get
			{
				return this._ParameterTypeID;
			}
			set
			{
				if ((this._ParameterTypeID != value))
				{
					if (this._ParameterType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParameterTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ParameterTypeID = value;
					this.SendPropertyChanged("ParameterTypeID");
					this.OnParameterTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommandParameterOrder", DbType="Int NOT NULL")]
		public int CommandParameterOrder
		{
			get
			{
				return this._CommandParameterOrder;
			}
			set
			{
				if ((this._CommandParameterOrder != value))
				{
					this.OnCommandParameterOrderChanging(value);
					this.SendPropertyChanging();
					this._CommandParameterOrder = value;
					this.SendPropertyChanged("CommandParameterOrder");
					this.OnCommandParameterOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Command_CommandParameterType", Storage="_Command", ThisKey="CommandID", OtherKey="CommandID", IsForeignKey=true)]
		public Command Command
		{
			get
			{
				return this._Command.Entity;
			}
			set
			{
				Command previousValue = this._Command.Entity;
				if (((previousValue != value) 
							|| (this._Command.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Command.Entity = null;
						previousValue.CommandParameterTypes.Remove(this);
					}
					this._Command.Entity = value;
					if ((value != null))
					{
						value.CommandParameterTypes.Add(this);
						this._CommandID = value.CommandID;
					}
					else
					{
						this._CommandID = default(int);
					}
					this.SendPropertyChanged("Command");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ParameterType_CommandParameterType", Storage="_ParameterType", ThisKey="ParameterTypeID", OtherKey="ParameterTypeID", IsForeignKey=true)]
		public ParameterType ParameterType
		{
			get
			{
				return this._ParameterType.Entity;
			}
			set
			{
				ParameterType previousValue = this._ParameterType.Entity;
				if (((previousValue != value) 
							|| (this._ParameterType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParameterType.Entity = null;
						previousValue.CommandParameterTypes.Remove(this);
					}
					this._ParameterType.Entity = value;
					if ((value != null))
					{
						value.CommandParameterTypes.Add(this);
						this._ParameterTypeID = value.ParameterTypeID;
					}
					else
					{
						this._ParameterTypeID = default(int);
					}
					this.SendPropertyChanged("ParameterType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="LookupData.ParameterType")]
	public partial class ParameterType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ParameterTypeID;
		
		private string _ParameterTypeName;
		
		private EntitySet<CommandParameterType> _CommandParameterTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParameterTypeIDChanging(int value);
    partial void OnParameterTypeIDChanged();
    partial void OnParameterTypeNameChanging(string value);
    partial void OnParameterTypeNameChanged();
    #endregion
		
		public ParameterType()
		{
			this._CommandParameterTypes = new EntitySet<CommandParameterType>(new Action<CommandParameterType>(this.attach_CommandParameterTypes), new Action<CommandParameterType>(this.detach_CommandParameterTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ParameterTypeID
		{
			get
			{
				return this._ParameterTypeID;
			}
			set
			{
				if ((this._ParameterTypeID != value))
				{
					this.OnParameterTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ParameterTypeID = value;
					this.SendPropertyChanged("ParameterTypeID");
					this.OnParameterTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ParameterTypeName
		{
			get
			{
				return this._ParameterTypeName;
			}
			set
			{
				if ((this._ParameterTypeName != value))
				{
					this.OnParameterTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ParameterTypeName = value;
					this.SendPropertyChanged("ParameterTypeName");
					this.OnParameterTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ParameterType_CommandParameterType", Storage="_CommandParameterTypes", ThisKey="ParameterTypeID", OtherKey="ParameterTypeID")]
		public EntitySet<CommandParameterType> CommandParameterTypes
		{
			get
			{
				return this._CommandParameterTypes;
			}
			set
			{
				this._CommandParameterTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommandParameterTypes(CommandParameterType entity)
		{
			this.SendPropertyChanging();
			entity.ParameterType = this;
		}
		
		private void detach_CommandParameterTypes(CommandParameterType entity)
		{
			this.SendPropertyChanging();
			entity.ParameterType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="LookupData.Action")]
	public partial class Action : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActionID;
		
		private string _ActionName;
		
		private EntitySet<CommandActionAction> _CommandActionActions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActionIDChanging(int value);
    partial void OnActionIDChanged();
    partial void OnActionNameChanging(string value);
    partial void OnActionNameChanged();
    #endregion
		
		public Action()
		{
			this._CommandActionActions = new EntitySet<CommandActionAction>(new Action<CommandActionAction>(this.attach_CommandActionActions), new Action<CommandActionAction>(this.detach_CommandActionActions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ActionName
		{
			get
			{
				return this._ActionName;
			}
			set
			{
				if ((this._ActionName != value))
				{
					this.OnActionNameChanging(value);
					this.SendPropertyChanging();
					this._ActionName = value;
					this.SendPropertyChanged("ActionName");
					this.OnActionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_CommandActionAction", Storage="_CommandActionActions", ThisKey="ActionID", OtherKey="ActionID")]
		public EntitySet<CommandActionAction> CommandActionActions
		{
			get
			{
				return this._CommandActionActions;
			}
			set
			{
				this._CommandActionActions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommandActionActions(CommandActionAction entity)
		{
			this.SendPropertyChanging();
			entity.Action = this;
		}
		
		private void detach_CommandActionActions(CommandActionAction entity)
		{
			this.SendPropertyChanging();
			entity.Action = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="LogicData.CommandActionAction")]
	public partial class CommandActionAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommandActionID;
		
		private int _ActionID;
		
		private int _ActionOrder;
		
		private EntityRef<Action> _Action;
		
		private EntityRef<CommandAction> _CommandAction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommandActionIDChanging(int value);
    partial void OnCommandActionIDChanged();
    partial void OnActionIDChanging(int value);
    partial void OnActionIDChanged();
    partial void OnActionOrderChanging(int value);
    partial void OnActionOrderChanged();
    #endregion
		
		public CommandActionAction()
		{
			this._Action = default(EntityRef<Action>);
			this._CommandAction = default(EntityRef<CommandAction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommandActionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CommandActionID
		{
			get
			{
				return this._CommandActionID;
			}
			set
			{
				if ((this._CommandActionID != value))
				{
					if (this._CommandAction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommandActionIDChanging(value);
					this.SendPropertyChanging();
					this._CommandActionID = value;
					this.SendPropertyChanged("CommandActionID");
					this.OnCommandActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					if (this._Action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionOrder", DbType="Int NOT NULL")]
		public int ActionOrder
		{
			get
			{
				return this._ActionOrder;
			}
			set
			{
				if ((this._ActionOrder != value))
				{
					this.OnActionOrderChanging(value);
					this.SendPropertyChanging();
					this._ActionOrder = value;
					this.SendPropertyChanged("ActionOrder");
					this.OnActionOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_CommandActionAction", Storage="_Action", ThisKey="ActionID", OtherKey="ActionID", IsForeignKey=true)]
		public Action Action
		{
			get
			{
				return this._Action.Entity;
			}
			set
			{
				Action previousValue = this._Action.Entity;
				if (((previousValue != value) 
							|| (this._Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Action.Entity = null;
						previousValue.CommandActionActions.Remove(this);
					}
					this._Action.Entity = value;
					if ((value != null))
					{
						value.CommandActionActions.Add(this);
						this._ActionID = value.ActionID;
					}
					else
					{
						this._ActionID = default(int);
					}
					this.SendPropertyChanged("Action");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommandAction_CommandActionAction", Storage="_CommandAction", ThisKey="CommandActionID", OtherKey="CommandActionID", IsForeignKey=true)]
		public CommandAction CommandAction
		{
			get
			{
				return this._CommandAction.Entity;
			}
			set
			{
				CommandAction previousValue = this._CommandAction.Entity;
				if (((previousValue != value) 
							|| (this._CommandAction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommandAction.Entity = null;
						previousValue.CommandActionActions.Remove(this);
					}
					this._CommandAction.Entity = value;
					if ((value != null))
					{
						value.CommandActionActions.Add(this);
						this._CommandActionID = value.CommandActionID;
					}
					else
					{
						this._CommandActionID = default(int);
					}
					this.SendPropertyChanged("CommandAction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="LogicData.CommandActionParameter")]
	public partial class CommandActionParameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommandActionID;
		
		private System.Guid _ParameterID;
		
		private int _CommandActionParameterOrder;
		
		private EntityRef<CommandAction> _CommandAction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommandActionIDChanging(int value);
    partial void OnCommandActionIDChanged();
    partial void OnParameterIDChanging(System.Guid value);
    partial void OnParameterIDChanged();
    partial void OnCommandActionParameterOrderChanging(int value);
    partial void OnCommandActionParameterOrderChanged();
    #endregion
		
		public CommandActionParameter()
		{
			this._CommandAction = default(EntityRef<CommandAction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommandActionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CommandActionID
		{
			get
			{
				return this._CommandActionID;
			}
			set
			{
				if ((this._CommandActionID != value))
				{
					if (this._CommandAction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommandActionIDChanging(value);
					this.SendPropertyChanging();
					this._CommandActionID = value;
					this.SendPropertyChanged("CommandActionID");
					this.OnCommandActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ParameterID
		{
			get
			{
				return this._ParameterID;
			}
			set
			{
				if ((this._ParameterID != value))
				{
					this.OnParameterIDChanging(value);
					this.SendPropertyChanging();
					this._ParameterID = value;
					this.SendPropertyChanged("ParameterID");
					this.OnParameterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommandActionParameterOrder", DbType="Int NOT NULL")]
		public int CommandActionParameterOrder
		{
			get
			{
				return this._CommandActionParameterOrder;
			}
			set
			{
				if ((this._CommandActionParameterOrder != value))
				{
					this.OnCommandActionParameterOrderChanging(value);
					this.SendPropertyChanging();
					this._CommandActionParameterOrder = value;
					this.SendPropertyChanged("CommandActionParameterOrder");
					this.OnCommandActionParameterOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommandAction_CommandActionParameter", Storage="_CommandAction", ThisKey="CommandActionID", OtherKey="CommandActionID", IsForeignKey=true)]
		public CommandAction CommandAction
		{
			get
			{
				return this._CommandAction.Entity;
			}
			set
			{
				CommandAction previousValue = this._CommandAction.Entity;
				if (((previousValue != value) 
							|| (this._CommandAction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommandAction.Entity = null;
						previousValue.CommandActionParameters.Remove(this);
					}
					this._CommandAction.Entity = value;
					if ((value != null))
					{
						value.CommandActionParameters.Add(this);
						this._CommandActionID = value.CommandActionID;
					}
					else
					{
						this._CommandActionID = default(int);
					}
					this.SendPropertyChanged("CommandAction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="LogicData.CommandActionDependency")]
	public partial class CommandActionDependency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommandActionID;
		
		private int _DependencyID;
		
		private int _DependencyOrder;
		
		private string _FailResponseMessage;
		
		private EntityRef<Dependency> _Dependency;
		
		private EntityRef<CommandAction> _CommandAction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommandActionIDChanging(int value);
    partial void OnCommandActionIDChanged();
    partial void OnDependencyIDChanging(int value);
    partial void OnDependencyIDChanged();
    partial void OnDependencyOrderChanging(int value);
    partial void OnDependencyOrderChanged();
    partial void OnFailResponseMessageChanging(string value);
    partial void OnFailResponseMessageChanged();
    #endregion
		
		public CommandActionDependency()
		{
			this._Dependency = default(EntityRef<Dependency>);
			this._CommandAction = default(EntityRef<CommandAction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommandActionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CommandActionID
		{
			get
			{
				return this._CommandActionID;
			}
			set
			{
				if ((this._CommandActionID != value))
				{
					if (this._CommandAction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommandActionIDChanging(value);
					this.SendPropertyChanging();
					this._CommandActionID = value;
					this.SendPropertyChanged("CommandActionID");
					this.OnCommandActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DependencyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DependencyID
		{
			get
			{
				return this._DependencyID;
			}
			set
			{
				if ((this._DependencyID != value))
				{
					if (this._Dependency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDependencyIDChanging(value);
					this.SendPropertyChanging();
					this._DependencyID = value;
					this.SendPropertyChanged("DependencyID");
					this.OnDependencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DependencyOrder", DbType="Int NOT NULL")]
		public int DependencyOrder
		{
			get
			{
				return this._DependencyOrder;
			}
			set
			{
				if ((this._DependencyOrder != value))
				{
					this.OnDependencyOrderChanging(value);
					this.SendPropertyChanging();
					this._DependencyOrder = value;
					this.SendPropertyChanged("DependencyOrder");
					this.OnDependencyOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailResponseMessage", DbType="VarChar(1000)")]
		public string FailResponseMessage
		{
			get
			{
				return this._FailResponseMessage;
			}
			set
			{
				if ((this._FailResponseMessage != value))
				{
					this.OnFailResponseMessageChanging(value);
					this.SendPropertyChanging();
					this._FailResponseMessage = value;
					this.SendPropertyChanged("FailResponseMessage");
					this.OnFailResponseMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dependency_CommandActionDependency", Storage="_Dependency", ThisKey="DependencyID", OtherKey="DependencyID", IsForeignKey=true)]
		public Dependency Dependency
		{
			get
			{
				return this._Dependency.Entity;
			}
			set
			{
				Dependency previousValue = this._Dependency.Entity;
				if (((previousValue != value) 
							|| (this._Dependency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dependency.Entity = null;
						previousValue.CommandActionDependencies.Remove(this);
					}
					this._Dependency.Entity = value;
					if ((value != null))
					{
						value.CommandActionDependencies.Add(this);
						this._DependencyID = value.DependencyID;
					}
					else
					{
						this._DependencyID = default(int);
					}
					this.SendPropertyChanged("Dependency");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommandAction_CommandActionDependency", Storage="_CommandAction", ThisKey="CommandActionID", OtherKey="CommandActionID", IsForeignKey=true)]
		public CommandAction CommandAction
		{
			get
			{
				return this._CommandAction.Entity;
			}
			set
			{
				CommandAction previousValue = this._CommandAction.Entity;
				if (((previousValue != value) 
							|| (this._CommandAction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommandAction.Entity = null;
						previousValue.CommandActionDependencies.Remove(this);
					}
					this._CommandAction.Entity = value;
					if ((value != null))
					{
						value.CommandActionDependencies.Add(this);
						this._CommandActionID = value.CommandActionID;
					}
					else
					{
						this._CommandActionID = default(int);
					}
					this.SendPropertyChanged("CommandAction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="LogicData.CommandAction")]
	public partial class CommandAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommandActionID;
		
		private int _CommandID;
		
		private System.Nullable<System.Guid> _GameID;
		
		private string _SuccessReponseMessage;
		
		private string _FailResponseMessage;
		
		private EntitySet<CommandActionAction> _CommandActionActions;
		
		private EntitySet<CommandActionParameter> _CommandActionParameters;
		
		private EntitySet<CommandActionDependency> _CommandActionDependencies;
		
		private EntityRef<Command> _Command;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommandActionIDChanging(int value);
    partial void OnCommandActionIDChanged();
    partial void OnCommandIDChanging(int value);
    partial void OnCommandIDChanged();
    partial void OnGameIDChanging(System.Nullable<System.Guid> value);
    partial void OnGameIDChanged();
    partial void OnSuccessReponseMessageChanging(string value);
    partial void OnSuccessReponseMessageChanged();
    partial void OnFailResponseMessageChanging(string value);
    partial void OnFailResponseMessageChanged();
    #endregion
		
		public CommandAction()
		{
			this._CommandActionActions = new EntitySet<CommandActionAction>(new Action<CommandActionAction>(this.attach_CommandActionActions), new Action<CommandActionAction>(this.detach_CommandActionActions));
			this._CommandActionParameters = new EntitySet<CommandActionParameter>(new Action<CommandActionParameter>(this.attach_CommandActionParameters), new Action<CommandActionParameter>(this.detach_CommandActionParameters));
			this._CommandActionDependencies = new EntitySet<CommandActionDependency>(new Action<CommandActionDependency>(this.attach_CommandActionDependencies), new Action<CommandActionDependency>(this.detach_CommandActionDependencies));
			this._Command = default(EntityRef<Command>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommandActionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommandActionID
		{
			get
			{
				return this._CommandActionID;
			}
			set
			{
				if ((this._CommandActionID != value))
				{
					this.OnCommandActionIDChanging(value);
					this.SendPropertyChanging();
					this._CommandActionID = value;
					this.SendPropertyChanged("CommandActionID");
					this.OnCommandActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommandID", DbType="Int NOT NULL")]
		public int CommandID
		{
			get
			{
				return this._CommandID;
			}
			set
			{
				if ((this._CommandID != value))
				{
					if (this._Command.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommandIDChanging(value);
					this.SendPropertyChanging();
					this._CommandID = value;
					this.SendPropertyChanged("CommandID");
					this.OnCommandIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuccessReponseMessage", DbType="VarChar(1000)")]
		public string SuccessReponseMessage
		{
			get
			{
				return this._SuccessReponseMessage;
			}
			set
			{
				if ((this._SuccessReponseMessage != value))
				{
					this.OnSuccessReponseMessageChanging(value);
					this.SendPropertyChanging();
					this._SuccessReponseMessage = value;
					this.SendPropertyChanged("SuccessReponseMessage");
					this.OnSuccessReponseMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailResponseMessage", DbType="VarChar(1000)")]
		public string FailResponseMessage
		{
			get
			{
				return this._FailResponseMessage;
			}
			set
			{
				if ((this._FailResponseMessage != value))
				{
					this.OnFailResponseMessageChanging(value);
					this.SendPropertyChanging();
					this._FailResponseMessage = value;
					this.SendPropertyChanged("FailResponseMessage");
					this.OnFailResponseMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommandAction_CommandActionAction", Storage="_CommandActionActions", ThisKey="CommandActionID", OtherKey="CommandActionID")]
		public EntitySet<CommandActionAction> CommandActionActions
		{
			get
			{
				return this._CommandActionActions;
			}
			set
			{
				this._CommandActionActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommandAction_CommandActionParameter", Storage="_CommandActionParameters", ThisKey="CommandActionID", OtherKey="CommandActionID")]
		public EntitySet<CommandActionParameter> CommandActionParameters
		{
			get
			{
				return this._CommandActionParameters;
			}
			set
			{
				this._CommandActionParameters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommandAction_CommandActionDependency", Storage="_CommandActionDependencies", ThisKey="CommandActionID", OtherKey="CommandActionID")]
		public EntitySet<CommandActionDependency> CommandActionDependencies
		{
			get
			{
				return this._CommandActionDependencies;
			}
			set
			{
				this._CommandActionDependencies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Command_CommandAction", Storage="_Command", ThisKey="CommandID", OtherKey="CommandID", IsForeignKey=true)]
		public Command Command
		{
			get
			{
				return this._Command.Entity;
			}
			set
			{
				Command previousValue = this._Command.Entity;
				if (((previousValue != value) 
							|| (this._Command.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Command.Entity = null;
						previousValue.CommandActions.Remove(this);
					}
					this._Command.Entity = value;
					if ((value != null))
					{
						value.CommandActions.Add(this);
						this._CommandID = value.CommandID;
					}
					else
					{
						this._CommandID = default(int);
					}
					this.SendPropertyChanged("Command");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommandActionActions(CommandActionAction entity)
		{
			this.SendPropertyChanging();
			entity.CommandAction = this;
		}
		
		private void detach_CommandActionActions(CommandActionAction entity)
		{
			this.SendPropertyChanging();
			entity.CommandAction = null;
		}
		
		private void attach_CommandActionParameters(CommandActionParameter entity)
		{
			this.SendPropertyChanging();
			entity.CommandAction = this;
		}
		
		private void detach_CommandActionParameters(CommandActionParameter entity)
		{
			this.SendPropertyChanging();
			entity.CommandAction = null;
		}
		
		private void attach_CommandActionDependencies(CommandActionDependency entity)
		{
			this.SendPropertyChanging();
			entity.CommandAction = this;
		}
		
		private void detach_CommandActionDependencies(CommandActionDependency entity)
		{
			this.SendPropertyChanging();
			entity.CommandAction = null;
		}
	}
}
#pragma warning restore 1591
