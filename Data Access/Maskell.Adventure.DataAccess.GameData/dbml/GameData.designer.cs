#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Maskell.Adventure.DataAccess.GameData.dbml
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Adventure")]
	public partial class GameDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertLocationDirection(LocationDirection instance);
    partial void UpdateLocationDirection(LocationDirection instance);
    partial void DeleteLocationDirection(LocationDirection instance);
    partial void InsertCommand(Command instance);
    partial void UpdateCommand(Command instance);
    partial void DeleteCommand(Command instance);
    partial void InsertDirection(Direction instance);
    partial void UpdateDirection(Direction instance);
    partial void DeleteDirection(Direction instance);
    #endregion
		
		public GameDataDataContext() : 
				base(global::Maskell.Adventure.DataAccess.GameData.Properties.Settings.Default.AdventureConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public GameDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GameDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GameDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GameDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<LocationDirection> LocationDirections
		{
			get
			{
				return this.GetTable<LocationDirection>();
			}
		}
		
		public System.Data.Linq.Table<Command> Commands
		{
			get
			{
				return this.GetTable<Command>();
			}
		}
		
		public System.Data.Linq.Table<Direction> Directions
		{
			get
			{
				return this.GetTable<Direction>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="LocationData.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _LocationID;
		
		private System.Guid _GameID;
		
		private string _LocationName;
		
		private string _LocationDescription;
		
		private EntitySet<Game> _Games;
		
		private EntitySet<LocationDirection> _LocationDirections;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIDChanging(System.Guid value);
    partial void OnLocationIDChanged();
    partial void OnGameIDChanging(System.Guid value);
    partial void OnGameIDChanged();
    partial void OnLocationNameChanging(string value);
    partial void OnLocationNameChanged();
    partial void OnLocationDescriptionChanging(string value);
    partial void OnLocationDescriptionChanged();
    #endregion
		
		public Location()
		{
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			this._LocationDirections = new EntitySet<LocationDirection>(new Action<LocationDirection>(this.attach_LocationDirections), new Action<LocationDirection>(this.detach_LocationDirections));
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string LocationName
		{
			get
			{
				return this._LocationName;
			}
			set
			{
				if ((this._LocationName != value))
				{
					this.OnLocationNameChanging(value);
					this.SendPropertyChanging();
					this._LocationName = value;
					this.SendPropertyChanged("LocationName");
					this.OnLocationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationDescription", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LocationDescription
		{
			get
			{
				return this._LocationDescription;
			}
			set
			{
				if ((this._LocationDescription != value))
				{
					this.OnLocationDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LocationDescription = value;
					this.SendPropertyChanged("LocationDescription");
					this.OnLocationDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Game", Storage="_Games", ThisKey="LocationID", OtherKey="StartLocationID")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationDirection", Storage="_LocationDirections", ThisKey="LocationID", OtherKey="SourceLocationID")]
		public EntitySet<LocationDirection> LocationDirections
		{
			get
			{
				return this._LocationDirections;
			}
			set
			{
				this._LocationDirections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Location", Storage="_Game", ThisKey="GameID", OtherKey="GameID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Locations.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Locations.Add(this);
						this._GameID = value.GameID;
					}
					else
					{
						this._GameID = default(System.Guid);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_LocationDirections(LocationDirection entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_LocationDirections(LocationDirection entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="GameData.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GameID;
		
		private int _OwnerID;
		
		private string _Title;
		
		private string _Description;
		
		private System.DateTime _DateAdded;
		
		private System.Nullable<System.Guid> _StartLocationID;
		
		private EntitySet<Location> _Locations;
		
		private EntityRef<Location> _Location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIDChanging(System.Guid value);
    partial void OnGameIDChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnStartLocationIDChanging(System.Nullable<System.Guid> value);
    partial void OnStartLocationIDChanged();
    #endregion
		
		public Game()
		{
			this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartLocationID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StartLocationID
		{
			get
			{
				return this._StartLocationID;
			}
			set
			{
				if ((this._StartLocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStartLocationIDChanging(value);
					this.SendPropertyChanging();
					this._StartLocationID = value;
					this.SendPropertyChanged("StartLocationID");
					this.OnStartLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Location", Storage="_Locations", ThisKey="GameID", OtherKey="GameID")]
		public EntitySet<Location> Locations
		{
			get
			{
				return this._Locations;
			}
			set
			{
				this._Locations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Game", Storage="_Location", ThisKey="StartLocationID", OtherKey="LocationID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._StartLocationID = value.LocationID;
					}
					else
					{
						this._StartLocationID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="LocationData.LocationDirection")]
	public partial class LocationDirection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SourceLocationID;
		
		private System.Guid _TargetLocationID;
		
		private System.Guid _DirectionID;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<Direction> _Direction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSourceLocationIDChanging(System.Guid value);
    partial void OnSourceLocationIDChanged();
    partial void OnTargetLocationIDChanging(System.Guid value);
    partial void OnTargetLocationIDChanged();
    partial void OnDirectionIDChanging(System.Guid value);
    partial void OnDirectionIDChanged();
    #endregion
		
		public LocationDirection()
		{
			this._Location = default(EntityRef<Location>);
			this._Direction = default(EntityRef<Direction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceLocationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SourceLocationID
		{
			get
			{
				return this._SourceLocationID;
			}
			set
			{
				if ((this._SourceLocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceLocationIDChanging(value);
					this.SendPropertyChanging();
					this._SourceLocationID = value;
					this.SendPropertyChanged("SourceLocationID");
					this.OnSourceLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetLocationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TargetLocationID
		{
			get
			{
				return this._TargetLocationID;
			}
			set
			{
				if ((this._TargetLocationID != value))
				{
					this.OnTargetLocationIDChanging(value);
					this.SendPropertyChanging();
					this._TargetLocationID = value;
					this.SendPropertyChanged("TargetLocationID");
					this.OnTargetLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DirectionID
		{
			get
			{
				return this._DirectionID;
			}
			set
			{
				if ((this._DirectionID != value))
				{
					if (this._Direction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDirectionIDChanging(value);
					this.SendPropertyChanging();
					this._DirectionID = value;
					this.SendPropertyChanged("DirectionID");
					this.OnDirectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationDirection", Storage="_Location", ThisKey="SourceLocationID", OtherKey="LocationID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.LocationDirections.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.LocationDirections.Add(this);
						this._SourceLocationID = value.LocationID;
					}
					else
					{
						this._SourceLocationID = default(System.Guid);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Direction_LocationDirection", Storage="_Direction", ThisKey="DirectionID", OtherKey="DirectionID", IsForeignKey=true)]
		public Direction Direction
		{
			get
			{
				return this._Direction.Entity;
			}
			set
			{
				Direction previousValue = this._Direction.Entity;
				if (((previousValue != value) 
							|| (this._Direction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Direction.Entity = null;
						previousValue.LocationDirections.Remove(this);
					}
					this._Direction.Entity = value;
					if ((value != null))
					{
						value.LocationDirections.Add(this);
						this._DirectionID = value.DirectionID;
					}
					else
					{
						this._DirectionID = default(System.Guid);
					}
					this.SendPropertyChanged("Direction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="LogicData.Command")]
	public partial class Command : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommandID;
		
		private int _CommandTypeID;
		
		private System.Nullable<int> _FirstParameterType;
		
		private System.Nullable<int> _SecondParameterType;
		
		private System.Nullable<int> _ThirdParameterType;
		
		private System.Nullable<int> _FourthParameterType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommandIDChanging(int value);
    partial void OnCommandIDChanged();
    partial void OnCommandTypeIDChanging(int value);
    partial void OnCommandTypeIDChanged();
    partial void OnFirstParameterTypeChanging(System.Nullable<int> value);
    partial void OnFirstParameterTypeChanged();
    partial void OnSecondParameterTypeChanging(System.Nullable<int> value);
    partial void OnSecondParameterTypeChanged();
    partial void OnThirdParameterTypeChanging(System.Nullable<int> value);
    partial void OnThirdParameterTypeChanged();
    partial void OnFourthParameterTypeChanging(System.Nullable<int> value);
    partial void OnFourthParameterTypeChanged();
    #endregion
		
		public Command()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommandID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CommandID
		{
			get
			{
				return this._CommandID;
			}
			set
			{
				if ((this._CommandID != value))
				{
					this.OnCommandIDChanging(value);
					this.SendPropertyChanging();
					this._CommandID = value;
					this.SendPropertyChanged("CommandID");
					this.OnCommandIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommandTypeID", DbType="Int NOT NULL")]
		public int CommandTypeID
		{
			get
			{
				return this._CommandTypeID;
			}
			set
			{
				if ((this._CommandTypeID != value))
				{
					this.OnCommandTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CommandTypeID = value;
					this.SendPropertyChanged("CommandTypeID");
					this.OnCommandTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstParameterType", DbType="Int")]
		public System.Nullable<int> FirstParameterType
		{
			get
			{
				return this._FirstParameterType;
			}
			set
			{
				if ((this._FirstParameterType != value))
				{
					this.OnFirstParameterTypeChanging(value);
					this.SendPropertyChanging();
					this._FirstParameterType = value;
					this.SendPropertyChanged("FirstParameterType");
					this.OnFirstParameterTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondParameterType", DbType="Int")]
		public System.Nullable<int> SecondParameterType
		{
			get
			{
				return this._SecondParameterType;
			}
			set
			{
				if ((this._SecondParameterType != value))
				{
					this.OnSecondParameterTypeChanging(value);
					this.SendPropertyChanging();
					this._SecondParameterType = value;
					this.SendPropertyChanged("SecondParameterType");
					this.OnSecondParameterTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdParameterType", DbType="Int")]
		public System.Nullable<int> ThirdParameterType
		{
			get
			{
				return this._ThirdParameterType;
			}
			set
			{
				if ((this._ThirdParameterType != value))
				{
					this.OnThirdParameterTypeChanging(value);
					this.SendPropertyChanging();
					this._ThirdParameterType = value;
					this.SendPropertyChanged("ThirdParameterType");
					this.OnThirdParameterTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FourthParameterType", DbType="Int")]
		public System.Nullable<int> FourthParameterType
		{
			get
			{
				return this._FourthParameterType;
			}
			set
			{
				if ((this._FourthParameterType != value))
				{
					this.OnFourthParameterTypeChanging(value);
					this.SendPropertyChanging();
					this._FourthParameterType = value;
					this.SendPropertyChanged("FourthParameterType");
					this.OnFourthParameterTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="LocationData.Direction")]
	public partial class Direction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DirectionID;
		
		private string _DirectionName;
		
		private string _ShortName;
		
		private EntitySet<LocationDirection> _LocationDirections;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDirectionIDChanging(System.Guid value);
    partial void OnDirectionIDChanged();
    partial void OnDirectionNameChanging(string value);
    partial void OnDirectionNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    #endregion
		
		public Direction()
		{
			this._LocationDirections = new EntitySet<LocationDirection>(new Action<LocationDirection>(this.attach_LocationDirections), new Action<LocationDirection>(this.detach_LocationDirections));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DirectionID
		{
			get
			{
				return this._DirectionID;
			}
			set
			{
				if ((this._DirectionID != value))
				{
					this.OnDirectionIDChanging(value);
					this.SendPropertyChanging();
					this._DirectionID = value;
					this.SendPropertyChanged("DirectionID");
					this.OnDirectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectionName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string DirectionName
		{
			get
			{
				return this._DirectionName;
			}
			set
			{
				if ((this._DirectionName != value))
				{
					this.OnDirectionNameChanging(value);
					this.SendPropertyChanging();
					this._DirectionName = value;
					this.SendPropertyChanged("DirectionName");
					this.OnDirectionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Direction_LocationDirection", Storage="_LocationDirections", ThisKey="DirectionID", OtherKey="DirectionID")]
		public EntitySet<LocationDirection> LocationDirections
		{
			get
			{
				return this._LocationDirections;
			}
			set
			{
				this._LocationDirections.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LocationDirections(LocationDirection entity)
		{
			this.SendPropertyChanging();
			entity.Direction = this;
		}
		
		private void detach_LocationDirections(LocationDirection entity)
		{
			this.SendPropertyChanging();
			entity.Direction = null;
		}
	}
}
#pragma warning restore 1591
