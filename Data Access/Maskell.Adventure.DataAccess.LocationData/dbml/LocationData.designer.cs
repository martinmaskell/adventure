#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Maskell.Adventure.DataAccess.LocationData.dbml
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Adventure")]
	public partial class LocationDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLocationItem(LocationItem instance);
    partial void UpdateLocationItem(LocationItem instance);
    partial void DeleteLocationItem(LocationItem instance);
    partial void InsertLocationDirection(LocationDirection instance);
    partial void UpdateLocationDirection(LocationDirection instance);
    partial void DeleteLocationDirection(LocationDirection instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertDirection(Direction instance);
    partial void UpdateDirection(Direction instance);
    partial void DeleteDirection(Direction instance);
    #endregion
		
		public LocationDataDataContext() : 
				base(global::Maskell.Adventure.DataAccess.LocationData.Properties.Settings.Default.AdventureConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LocationDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LocationDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LocationDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LocationDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<LocationItem> LocationItems
		{
			get
			{
				return this.GetTable<LocationItem>();
			}
		}
		
		public System.Data.Linq.Table<LocationDirection> LocationDirections
		{
			get
			{
				return this.GetTable<LocationDirection>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<Direction> Directions
		{
			get
			{
				return this.GetTable<Direction>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="LocationData.LocationItem")]
	public partial class LocationItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _LocationID;
		
		private System.Guid _ItemID;
		
		private EntityRef<Location> _Location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIDChanging(System.Guid value);
    partial void OnLocationIDChanged();
    partial void OnItemIDChanging(System.Guid value);
    partial void OnItemIDChanged();
    #endregion
		
		public LocationItem()
		{
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationItem", Storage="_Location", ThisKey="LocationID", OtherKey="LocationID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.LocationItems.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.LocationItems.Add(this);
						this._LocationID = value.LocationID;
					}
					else
					{
						this._LocationID = default(System.Guid);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="LocationData.LocationDirection")]
	public partial class LocationDirection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SourceLocationID;
		
		private System.Guid _TargetLocationID;
		
		private System.Guid _DirectionID;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<Location> _Location1;
		
		private EntityRef<Direction> _Direction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSourceLocationIDChanging(System.Guid value);
    partial void OnSourceLocationIDChanged();
    partial void OnTargetLocationIDChanging(System.Guid value);
    partial void OnTargetLocationIDChanged();
    partial void OnDirectionIDChanging(System.Guid value);
    partial void OnDirectionIDChanged();
    #endregion
		
		public LocationDirection()
		{
			this._Location = default(EntityRef<Location>);
			this._Location1 = default(EntityRef<Location>);
			this._Direction = default(EntityRef<Direction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceLocationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SourceLocationID
		{
			get
			{
				return this._SourceLocationID;
			}
			set
			{
				if ((this._SourceLocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceLocationIDChanging(value);
					this.SendPropertyChanging();
					this._SourceLocationID = value;
					this.SendPropertyChanged("SourceLocationID");
					this.OnSourceLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetLocationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TargetLocationID
		{
			get
			{
				return this._TargetLocationID;
			}
			set
			{
				if ((this._TargetLocationID != value))
				{
					if (this._Location1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTargetLocationIDChanging(value);
					this.SendPropertyChanging();
					this._TargetLocationID = value;
					this.SendPropertyChanged("TargetLocationID");
					this.OnTargetLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DirectionID
		{
			get
			{
				return this._DirectionID;
			}
			set
			{
				if ((this._DirectionID != value))
				{
					if (this._Direction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDirectionIDChanging(value);
					this.SendPropertyChanging();
					this._DirectionID = value;
					this.SendPropertyChanged("DirectionID");
					this.OnDirectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationDirection", Storage="_Location", ThisKey="SourceLocationID", OtherKey="LocationID", IsForeignKey=true)]
		public Location SourceLocation
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.LocationDirections.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.LocationDirections.Add(this);
						this._SourceLocationID = value.LocationID;
					}
					else
					{
						this._SourceLocationID = default(System.Guid);
					}
					this.SendPropertyChanged("SourceLocation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationDirection1", Storage="_Location1", ThisKey="TargetLocationID", OtherKey="LocationID", IsForeignKey=true)]
		public Location TargetLocation
		{
			get
			{
				return this._Location1.Entity;
			}
			set
			{
				Location previousValue = this._Location1.Entity;
				if (((previousValue != value) 
							|| (this._Location1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location1.Entity = null;
						previousValue.LocationDirections1.Remove(this);
					}
					this._Location1.Entity = value;
					if ((value != null))
					{
						value.LocationDirections1.Add(this);
						this._TargetLocationID = value.LocationID;
					}
					else
					{
						this._TargetLocationID = default(System.Guid);
					}
					this.SendPropertyChanged("TargetLocation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Direction_LocationDirection", Storage="_Direction", ThisKey="DirectionID", OtherKey="DirectionID", IsForeignKey=true)]
		public Direction Direction
		{
			get
			{
				return this._Direction.Entity;
			}
			set
			{
				Direction previousValue = this._Direction.Entity;
				if (((previousValue != value) 
							|| (this._Direction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Direction.Entity = null;
						previousValue.LocationDirections.Remove(this);
					}
					this._Direction.Entity = value;
					if ((value != null))
					{
						value.LocationDirections.Add(this);
						this._DirectionID = value.DirectionID;
					}
					else
					{
						this._DirectionID = default(System.Guid);
					}
					this.SendPropertyChanged("Direction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="LocationData.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _LocationID;
		
		private System.Guid _GameID;
		
		private string _LocationName;
		
		private string _LocationDescription;
		
		private EntitySet<LocationItem> _LocationItems;
		
		private EntitySet<LocationDirection> _LocationDirections;
		
		private EntitySet<LocationDirection> _LocationDirections1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIDChanging(System.Guid value);
    partial void OnLocationIDChanged();
    partial void OnGameIDChanging(System.Guid value);
    partial void OnGameIDChanged();
    partial void OnLocationNameChanging(string value);
    partial void OnLocationNameChanged();
    partial void OnLocationDescriptionChanging(string value);
    partial void OnLocationDescriptionChanged();
    #endregion
		
		public Location()
		{
			this._LocationItems = new EntitySet<LocationItem>(new Action<LocationItem>(this.attach_LocationItems), new Action<LocationItem>(this.detach_LocationItems));
			this._LocationDirections = new EntitySet<LocationDirection>(new Action<LocationDirection>(this.attach_LocationDirections), new Action<LocationDirection>(this.detach_LocationDirections));
			this._LocationDirections1 = new EntitySet<LocationDirection>(new Action<LocationDirection>(this.attach_LocationDirections1), new Action<LocationDirection>(this.detach_LocationDirections1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string LocationName
		{
			get
			{
				return this._LocationName;
			}
			set
			{
				if ((this._LocationName != value))
				{
					this.OnLocationNameChanging(value);
					this.SendPropertyChanging();
					this._LocationName = value;
					this.SendPropertyChanged("LocationName");
					this.OnLocationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationDescription", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LocationDescription
		{
			get
			{
				return this._LocationDescription;
			}
			set
			{
				if ((this._LocationDescription != value))
				{
					this.OnLocationDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LocationDescription = value;
					this.SendPropertyChanged("LocationDescription");
					this.OnLocationDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationItem", Storage="_LocationItems", ThisKey="LocationID", OtherKey="LocationID")]
		public EntitySet<LocationItem> LocationItems
		{
			get
			{
				return this._LocationItems;
			}
			set
			{
				this._LocationItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationDirection", Storage="_LocationDirections", ThisKey="LocationID", OtherKey="SourceLocationID")]
		public EntitySet<LocationDirection> LocationDirections
		{
			get
			{
				return this._LocationDirections;
			}
			set
			{
				this._LocationDirections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationDirection1", Storage="_LocationDirections1", ThisKey="LocationID", OtherKey="TargetLocationID")]
		public EntitySet<LocationDirection> LocationDirections1
		{
			get
			{
				return this._LocationDirections1;
			}
			set
			{
				this._LocationDirections1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LocationItems(LocationItem entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_LocationItems(LocationItem entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_LocationDirections(LocationDirection entity)
		{
			this.SendPropertyChanging();
			entity.SourceLocation = this;
		}
		
		private void detach_LocationDirections(LocationDirection entity)
		{
			this.SendPropertyChanging();
			entity.SourceLocation = null;
		}
		
		private void attach_LocationDirections1(LocationDirection entity)
		{
			this.SendPropertyChanging();
			entity.TargetLocation = this;
		}
		
		private void detach_LocationDirections1(LocationDirection entity)
		{
			this.SendPropertyChanging();
			entity.TargetLocation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="LocationData.Direction")]
	public partial class Direction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DirectionID;
		
		private string _DirectionName;
		
		private string _ShortName;
		
		private EntitySet<LocationDirection> _LocationDirections;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDirectionIDChanging(System.Guid value);
    partial void OnDirectionIDChanged();
    partial void OnDirectionNameChanging(string value);
    partial void OnDirectionNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    #endregion
		
		public Direction()
		{
			this._LocationDirections = new EntitySet<LocationDirection>(new Action<LocationDirection>(this.attach_LocationDirections), new Action<LocationDirection>(this.detach_LocationDirections));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DirectionID
		{
			get
			{
				return this._DirectionID;
			}
			set
			{
				if ((this._DirectionID != value))
				{
					this.OnDirectionIDChanging(value);
					this.SendPropertyChanging();
					this._DirectionID = value;
					this.SendPropertyChanged("DirectionID");
					this.OnDirectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectionName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string DirectionName
		{
			get
			{
				return this._DirectionName;
			}
			set
			{
				if ((this._DirectionName != value))
				{
					this.OnDirectionNameChanging(value);
					this.SendPropertyChanging();
					this._DirectionName = value;
					this.SendPropertyChanged("DirectionName");
					this.OnDirectionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Direction_LocationDirection", Storage="_LocationDirections", ThisKey="DirectionID", OtherKey="DirectionID")]
		public EntitySet<LocationDirection> LocationDirections
		{
			get
			{
				return this._LocationDirections;
			}
			set
			{
				this._LocationDirections.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LocationDirections(LocationDirection entity)
		{
			this.SendPropertyChanging();
			entity.Direction = this;
		}
		
		private void detach_LocationDirections(LocationDirection entity)
		{
			this.SendPropertyChanging();
			entity.Direction = null;
		}
	}
}
#pragma warning restore 1591
