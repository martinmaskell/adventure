//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("AdventureModel", "FK_CommandAction_Game", "Game", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Editor.Game), "CommandAction", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Editor.CommandAction), true)]
[assembly: EdmRelationshipAttribute("AdventureModel", "FK_Location_Game", "Game", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Editor.Game), "Location", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Editor.Location), true)]
[assembly: EdmRelationshipAttribute("AdventureModel", "FK_LocationDirection_Direction", "Direction", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Editor.Direction), "LocationDirection", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Editor.LocationDirection), true)]
[assembly: EdmRelationshipAttribute("AdventureModel", "FK_LocationDirection_Location", "Location", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Editor.Location), "LocationDirection", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Editor.LocationDirection), true)]
[assembly: EdmRelationshipAttribute("AdventureModel", "FK_LocationDirection_Location1", "Location", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Editor.Location), "LocationDirection", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Editor.LocationDirection), true)]
[assembly: EdmRelationshipAttribute("AdventureModel", "FK_LocationItem_Location", "Location", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Editor.Location), "LocationItem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Editor.LocationItem), true)]
[assembly: EdmRelationshipAttribute("AdventureModel", "FK_Command_CommandType", "CommandType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Editor.CommandType), "Command", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Editor.Command), true)]
[assembly: EdmRelationshipAttribute("AdventureModel", "FK_CommandAction_Command", "Command", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Editor.Command), "CommandAction", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Editor.CommandAction), true)]
[assembly: EdmRelationshipAttribute("AdventureModel", "FK_CommandParameterType_Command", "Command", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Editor.Command), "CommandParameterType", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Editor.CommandParameterType), true)]
[assembly: EdmRelationshipAttribute("AdventureModel", "FK_CommandActionAction_CommandAction", "CommandAction", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Editor.CommandAction), "CommandActionAction", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Editor.CommandActionAction), true)]
[assembly: EdmRelationshipAttribute("AdventureModel", "FK_CommandActionDependency_CommandAction", "CommandAction", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Editor.CommandAction), "CommandActionDependency", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Editor.CommandActionDependency), true)]
[assembly: EdmRelationshipAttribute("AdventureModel", "FK_CommandActionParameter_CommandAction", "CommandAction", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Editor.CommandAction), "CommandActionParameter", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Editor.CommandActionParameter), true)]
[assembly: EdmRelationshipAttribute("AdventureModel", "FK_CommandActionAction_Action", "Action", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Editor.Action), "CommandActionAction", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Editor.CommandActionAction), true)]
[assembly: EdmRelationshipAttribute("AdventureModel", "FK_CommandActionDependency_Dependency", "Dependency", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Editor.Dependency), "CommandActionDependency", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Editor.CommandActionDependency), true)]
[assembly: EdmRelationshipAttribute("AdventureModel", "FK_CommandParameterType_ParameterType", "ParameterType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Editor.ParameterType), "CommandParameterType", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Editor.CommandParameterType), true)]
[assembly: EdmRelationshipAttribute("AdventureModel", "FK_Dependency_DependencyType", "DependencyType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Editor.DependencyType), "Dependency", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Editor.Dependency), true)]

#endregion

namespace Editor
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class AdventureEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new AdventureEntities object using the connection string found in the 'AdventureEntities' section of the application configuration file.
        /// </summary>
        public AdventureEntities() : base("name=AdventureEntities", "AdventureEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new AdventureEntities object.
        /// </summary>
        public AdventureEntities(string connectionString) : base(connectionString, "AdventureEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new AdventureEntities object.
        /// </summary>
        public AdventureEntities(EntityConnection connection) : base(connection, "AdventureEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Game> Games
        {
            get
            {
                if ((_Games == null))
                {
                    _Games = base.CreateObjectSet<Game>("Games");
                }
                return _Games;
            }
        }
        private ObjectSet<Game> _Games;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Direction> Directions
        {
            get
            {
                if ((_Directions == null))
                {
                    _Directions = base.CreateObjectSet<Direction>("Directions");
                }
                return _Directions;
            }
        }
        private ObjectSet<Direction> _Directions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Location> Locations
        {
            get
            {
                if ((_Locations == null))
                {
                    _Locations = base.CreateObjectSet<Location>("Locations");
                }
                return _Locations;
            }
        }
        private ObjectSet<Location> _Locations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LocationDirection> LocationDirections
        {
            get
            {
                if ((_LocationDirections == null))
                {
                    _LocationDirections = base.CreateObjectSet<LocationDirection>("LocationDirections");
                }
                return _LocationDirections;
            }
        }
        private ObjectSet<LocationDirection> _LocationDirections;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LocationItem> LocationItems
        {
            get
            {
                if ((_LocationItems == null))
                {
                    _LocationItems = base.CreateObjectSet<LocationItem>("LocationItems");
                }
                return _LocationItems;
            }
        }
        private ObjectSet<LocationItem> _LocationItems;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Command> Commands
        {
            get
            {
                if ((_Commands == null))
                {
                    _Commands = base.CreateObjectSet<Command>("Commands");
                }
                return _Commands;
            }
        }
        private ObjectSet<Command> _Commands;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CommandAction> CommandActions
        {
            get
            {
                if ((_CommandActions == null))
                {
                    _CommandActions = base.CreateObjectSet<CommandAction>("CommandActions");
                }
                return _CommandActions;
            }
        }
        private ObjectSet<CommandAction> _CommandActions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CommandActionAction> CommandActionActions
        {
            get
            {
                if ((_CommandActionActions == null))
                {
                    _CommandActionActions = base.CreateObjectSet<CommandActionAction>("CommandActionActions");
                }
                return _CommandActionActions;
            }
        }
        private ObjectSet<CommandActionAction> _CommandActionActions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CommandActionDependency> CommandActionDependencies
        {
            get
            {
                if ((_CommandActionDependencies == null))
                {
                    _CommandActionDependencies = base.CreateObjectSet<CommandActionDependency>("CommandActionDependencies");
                }
                return _CommandActionDependencies;
            }
        }
        private ObjectSet<CommandActionDependency> _CommandActionDependencies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CommandActionParameter> CommandActionParameters
        {
            get
            {
                if ((_CommandActionParameters == null))
                {
                    _CommandActionParameters = base.CreateObjectSet<CommandActionParameter>("CommandActionParameters");
                }
                return _CommandActionParameters;
            }
        }
        private ObjectSet<CommandActionParameter> _CommandActionParameters;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CommandParameterType> CommandParameterTypes
        {
            get
            {
                if ((_CommandParameterTypes == null))
                {
                    _CommandParameterTypes = base.CreateObjectSet<CommandParameterType>("CommandParameterTypes");
                }
                return _CommandParameterTypes;
            }
        }
        private ObjectSet<CommandParameterType> _CommandParameterTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Dependency> Dependencies
        {
            get
            {
                if ((_Dependencies == null))
                {
                    _Dependencies = base.CreateObjectSet<Dependency>("Dependencies");
                }
                return _Dependencies;
            }
        }
        private ObjectSet<Dependency> _Dependencies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Action> Actions
        {
            get
            {
                if ((_Actions == null))
                {
                    _Actions = base.CreateObjectSet<Action>("Actions");
                }
                return _Actions;
            }
        }
        private ObjectSet<Action> _Actions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CommandResponseReason> CommandResponseReasons
        {
            get
            {
                if ((_CommandResponseReasons == null))
                {
                    _CommandResponseReasons = base.CreateObjectSet<CommandResponseReason>("CommandResponseReasons");
                }
                return _CommandResponseReasons;
            }
        }
        private ObjectSet<CommandResponseReason> _CommandResponseReasons;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CommandType> CommandTypes
        {
            get
            {
                if ((_CommandTypes == null))
                {
                    _CommandTypes = base.CreateObjectSet<CommandType>("CommandTypes");
                }
                return _CommandTypes;
            }
        }
        private ObjectSet<CommandType> _CommandTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DependencyType> DependencyTypes
        {
            get
            {
                if ((_DependencyTypes == null))
                {
                    _DependencyTypes = base.CreateObjectSet<DependencyType>("DependencyTypes");
                }
                return _DependencyTypes;
            }
        }
        private ObjectSet<DependencyType> _DependencyTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ParameterType> ParameterTypes
        {
            get
            {
                if ((_ParameterTypes == null))
                {
                    _ParameterTypes = base.CreateObjectSet<ParameterType>("ParameterTypes");
                }
                return _ParameterTypes;
            }
        }
        private ObjectSet<ParameterType> _ParameterTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PropertyDataType> PropertyDataTypes
        {
            get
            {
                if ((_PropertyDataTypes == null))
                {
                    _PropertyDataTypes = base.CreateObjectSet<PropertyDataType>("PropertyDataTypes");
                }
                return _PropertyDataTypes;
            }
        }
        private ObjectSet<PropertyDataType> _PropertyDataTypes;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Games EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGames(Game game)
        {
            base.AddObject("Games", game);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Directions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDirections(Direction direction)
        {
            base.AddObject("Directions", direction);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Locations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLocations(Location location)
        {
            base.AddObject("Locations", location);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the LocationDirections EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLocationDirections(LocationDirection locationDirection)
        {
            base.AddObject("LocationDirections", locationDirection);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the LocationItems EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLocationItems(LocationItem locationItem)
        {
            base.AddObject("LocationItems", locationItem);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Commands EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCommands(Command command)
        {
            base.AddObject("Commands", command);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CommandActions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCommandActions(CommandAction commandAction)
        {
            base.AddObject("CommandActions", commandAction);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CommandActionActions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCommandActionActions(CommandActionAction commandActionAction)
        {
            base.AddObject("CommandActionActions", commandActionAction);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CommandActionDependencies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCommandActionDependencies(CommandActionDependency commandActionDependency)
        {
            base.AddObject("CommandActionDependencies", commandActionDependency);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CommandActionParameters EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCommandActionParameters(CommandActionParameter commandActionParameter)
        {
            base.AddObject("CommandActionParameters", commandActionParameter);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CommandParameterTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCommandParameterTypes(CommandParameterType commandParameterType)
        {
            base.AddObject("CommandParameterTypes", commandParameterType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Dependencies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDependencies(Dependency dependency)
        {
            base.AddObject("Dependencies", dependency);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Actions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToActions(Action action)
        {
            base.AddObject("Actions", action);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CommandResponseReasons EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCommandResponseReasons(CommandResponseReason commandResponseReason)
        {
            base.AddObject("CommandResponseReasons", commandResponseReason);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CommandTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCommandTypes(CommandType commandType)
        {
            base.AddObject("CommandTypes", commandType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the DependencyTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDependencyTypes(DependencyType dependencyType)
        {
            base.AddObject("DependencyTypes", dependencyType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ParameterTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToParameterTypes(ParameterType parameterType)
        {
            base.AddObject("ParameterTypes", parameterType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PropertyDataTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPropertyDataTypes(PropertyDataType propertyDataType)
        {
            base.AddObject("PropertyDataTypes", propertyDataType);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AdventureModel", Name="Action")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Action : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Action object.
        /// </summary>
        /// <param name="actionID">Initial value of the ActionID property.</param>
        /// <param name="actionName">Initial value of the ActionName property.</param>
        public static Action CreateAction(global::System.Int32 actionID, global::System.String actionName)
        {
            Action action = new Action();
            action.ActionID = actionID;
            action.ActionName = actionName;
            return action;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ActionID
        {
            get
            {
                return _ActionID;
            }
            set
            {
                if (_ActionID != value)
                {
                    OnActionIDChanging(value);
                    ReportPropertyChanging("ActionID");
                    _ActionID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ActionID");
                    OnActionIDChanged();
                }
            }
        }
        private global::System.Int32 _ActionID;
        partial void OnActionIDChanging(global::System.Int32 value);
        partial void OnActionIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ActionName
        {
            get
            {
                return _ActionName;
            }
            set
            {
                OnActionNameChanging(value);
                ReportPropertyChanging("ActionName");
                _ActionName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ActionName");
                OnActionNameChanged();
            }
        }
        private global::System.String _ActionName;
        partial void OnActionNameChanging(global::System.String value);
        partial void OnActionNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_CommandActionAction_Action", "CommandActionAction")]
        public EntityCollection<CommandActionAction> CommandActionActions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CommandActionAction>("AdventureModel.FK_CommandActionAction_Action", "CommandActionAction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CommandActionAction>("AdventureModel.FK_CommandActionAction_Action", "CommandActionAction", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AdventureModel", Name="Command")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Command : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Command object.
        /// </summary>
        /// <param name="commandID">Initial value of the CommandID property.</param>
        /// <param name="commandTypeID">Initial value of the CommandTypeID property.</param>
        public static Command CreateCommand(global::System.Int32 commandID, global::System.Int32 commandTypeID)
        {
            Command command = new Command();
            command.CommandID = commandID;
            command.CommandTypeID = commandTypeID;
            return command;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CommandID
        {
            get
            {
                return _CommandID;
            }
            set
            {
                if (_CommandID != value)
                {
                    OnCommandIDChanging(value);
                    ReportPropertyChanging("CommandID");
                    _CommandID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CommandID");
                    OnCommandIDChanged();
                }
            }
        }
        private global::System.Int32 _CommandID;
        partial void OnCommandIDChanging(global::System.Int32 value);
        partial void OnCommandIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CommandTypeID
        {
            get
            {
                return _CommandTypeID;
            }
            set
            {
                OnCommandTypeIDChanging(value);
                ReportPropertyChanging("CommandTypeID");
                _CommandTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CommandTypeID");
                OnCommandTypeIDChanged();
            }
        }
        private global::System.Int32 _CommandTypeID;
        partial void OnCommandTypeIDChanging(global::System.Int32 value);
        partial void OnCommandTypeIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_Command_CommandType", "CommandType")]
        public CommandType CommandType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CommandType>("AdventureModel.FK_Command_CommandType", "CommandType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CommandType>("AdventureModel.FK_Command_CommandType", "CommandType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CommandType> CommandTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CommandType>("AdventureModel.FK_Command_CommandType", "CommandType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CommandType>("AdventureModel.FK_Command_CommandType", "CommandType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_CommandAction_Command", "CommandAction")]
        public EntityCollection<CommandAction> CommandActions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CommandAction>("AdventureModel.FK_CommandAction_Command", "CommandAction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CommandAction>("AdventureModel.FK_CommandAction_Command", "CommandAction", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_CommandParameterType_Command", "CommandParameterType")]
        public EntityCollection<CommandParameterType> CommandParameterTypes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CommandParameterType>("AdventureModel.FK_CommandParameterType_Command", "CommandParameterType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CommandParameterType>("AdventureModel.FK_CommandParameterType_Command", "CommandParameterType", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AdventureModel", Name="CommandAction")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CommandAction : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CommandAction object.
        /// </summary>
        /// <param name="commandActionID">Initial value of the CommandActionID property.</param>
        /// <param name="commandID">Initial value of the CommandID property.</param>
        public static CommandAction CreateCommandAction(global::System.Int32 commandActionID, global::System.Int32 commandID)
        {
            CommandAction commandAction = new CommandAction();
            commandAction.CommandActionID = commandActionID;
            commandAction.CommandID = commandID;
            return commandAction;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CommandActionID
        {
            get
            {
                return _CommandActionID;
            }
            set
            {
                if (_CommandActionID != value)
                {
                    OnCommandActionIDChanging(value);
                    ReportPropertyChanging("CommandActionID");
                    _CommandActionID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CommandActionID");
                    OnCommandActionIDChanged();
                }
            }
        }
        private global::System.Int32 _CommandActionID;
        partial void OnCommandActionIDChanging(global::System.Int32 value);
        partial void OnCommandActionIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CommandID
        {
            get
            {
                return _CommandID;
            }
            set
            {
                OnCommandIDChanging(value);
                ReportPropertyChanging("CommandID");
                _CommandID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CommandID");
                OnCommandIDChanged();
            }
        }
        private global::System.Int32 _CommandID;
        partial void OnCommandIDChanging(global::System.Int32 value);
        partial void OnCommandIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> GameID
        {
            get
            {
                return _GameID;
            }
            set
            {
                OnGameIDChanging(value);
                ReportPropertyChanging("GameID");
                _GameID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("GameID");
                OnGameIDChanged();
            }
        }
        private Nullable<global::System.Guid> _GameID;
        partial void OnGameIDChanging(Nullable<global::System.Guid> value);
        partial void OnGameIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SuccessReponseMessage
        {
            get
            {
                return _SuccessReponseMessage;
            }
            set
            {
                OnSuccessReponseMessageChanging(value);
                ReportPropertyChanging("SuccessReponseMessage");
                _SuccessReponseMessage = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SuccessReponseMessage");
                OnSuccessReponseMessageChanged();
            }
        }
        private global::System.String _SuccessReponseMessage;
        partial void OnSuccessReponseMessageChanging(global::System.String value);
        partial void OnSuccessReponseMessageChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FailResponseMessage
        {
            get
            {
                return _FailResponseMessage;
            }
            set
            {
                OnFailResponseMessageChanging(value);
                ReportPropertyChanging("FailResponseMessage");
                _FailResponseMessage = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FailResponseMessage");
                OnFailResponseMessageChanged();
            }
        }
        private global::System.String _FailResponseMessage;
        partial void OnFailResponseMessageChanging(global::System.String value);
        partial void OnFailResponseMessageChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_CommandAction_Game", "Game")]
        public Game Game
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("AdventureModel.FK_CommandAction_Game", "Game").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("AdventureModel.FK_CommandAction_Game", "Game").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Game> GameReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("AdventureModel.FK_CommandAction_Game", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Game>("AdventureModel.FK_CommandAction_Game", "Game", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_CommandAction_Command", "Command")]
        public Command Command
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Command>("AdventureModel.FK_CommandAction_Command", "Command").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Command>("AdventureModel.FK_CommandAction_Command", "Command").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Command> CommandReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Command>("AdventureModel.FK_CommandAction_Command", "Command");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Command>("AdventureModel.FK_CommandAction_Command", "Command", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_CommandActionAction_CommandAction", "CommandActionAction")]
        public EntityCollection<CommandActionAction> CommandActionActions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CommandActionAction>("AdventureModel.FK_CommandActionAction_CommandAction", "CommandActionAction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CommandActionAction>("AdventureModel.FK_CommandActionAction_CommandAction", "CommandActionAction", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_CommandActionDependency_CommandAction", "CommandActionDependency")]
        public EntityCollection<CommandActionDependency> CommandActionDependencies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CommandActionDependency>("AdventureModel.FK_CommandActionDependency_CommandAction", "CommandActionDependency");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CommandActionDependency>("AdventureModel.FK_CommandActionDependency_CommandAction", "CommandActionDependency", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_CommandActionParameter_CommandAction", "CommandActionParameter")]
        public EntityCollection<CommandActionParameter> CommandActionParameters
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CommandActionParameter>("AdventureModel.FK_CommandActionParameter_CommandAction", "CommandActionParameter");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CommandActionParameter>("AdventureModel.FK_CommandActionParameter_CommandAction", "CommandActionParameter", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AdventureModel", Name="CommandActionAction")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CommandActionAction : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CommandActionAction object.
        /// </summary>
        /// <param name="commandActionID">Initial value of the CommandActionID property.</param>
        /// <param name="actionID">Initial value of the ActionID property.</param>
        public static CommandActionAction CreateCommandActionAction(global::System.Int32 commandActionID, global::System.Int32 actionID)
        {
            CommandActionAction commandActionAction = new CommandActionAction();
            commandActionAction.CommandActionID = commandActionID;
            commandActionAction.ActionID = actionID;
            return commandActionAction;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CommandActionID
        {
            get
            {
                return _CommandActionID;
            }
            set
            {
                if (_CommandActionID != value)
                {
                    OnCommandActionIDChanging(value);
                    ReportPropertyChanging("CommandActionID");
                    _CommandActionID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CommandActionID");
                    OnCommandActionIDChanged();
                }
            }
        }
        private global::System.Int32 _CommandActionID;
        partial void OnCommandActionIDChanging(global::System.Int32 value);
        partial void OnCommandActionIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ActionID
        {
            get
            {
                return _ActionID;
            }
            set
            {
                if (_ActionID != value)
                {
                    OnActionIDChanging(value);
                    ReportPropertyChanging("ActionID");
                    _ActionID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ActionID");
                    OnActionIDChanged();
                }
            }
        }
        private global::System.Int32 _ActionID;
        partial void OnActionIDChanging(global::System.Int32 value);
        partial void OnActionIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ActionOrder
        {
            get
            {
                return _ActionOrder;
            }
            set
            {
                OnActionOrderChanging(value);
                ReportPropertyChanging("ActionOrder");
                _ActionOrder = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ActionOrder");
                OnActionOrderChanged();
            }
        }
        private Nullable<global::System.Int32> _ActionOrder;
        partial void OnActionOrderChanging(Nullable<global::System.Int32> value);
        partial void OnActionOrderChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_CommandActionAction_CommandAction", "CommandAction")]
        public CommandAction CommandAction
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CommandAction>("AdventureModel.FK_CommandActionAction_CommandAction", "CommandAction").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CommandAction>("AdventureModel.FK_CommandActionAction_CommandAction", "CommandAction").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CommandAction> CommandActionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CommandAction>("AdventureModel.FK_CommandActionAction_CommandAction", "CommandAction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CommandAction>("AdventureModel.FK_CommandActionAction_CommandAction", "CommandAction", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_CommandActionAction_Action", "Action")]
        public Action Action
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Action>("AdventureModel.FK_CommandActionAction_Action", "Action").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Action>("AdventureModel.FK_CommandActionAction_Action", "Action").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Action> ActionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Action>("AdventureModel.FK_CommandActionAction_Action", "Action");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Action>("AdventureModel.FK_CommandActionAction_Action", "Action", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AdventureModel", Name="CommandActionDependency")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CommandActionDependency : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CommandActionDependency object.
        /// </summary>
        /// <param name="commandActionID">Initial value of the CommandActionID property.</param>
        /// <param name="dependencyID">Initial value of the DependencyID property.</param>
        /// <param name="dependencyOrder">Initial value of the DependencyOrder property.</param>
        public static CommandActionDependency CreateCommandActionDependency(global::System.Int32 commandActionID, global::System.Int32 dependencyID, global::System.Int32 dependencyOrder)
        {
            CommandActionDependency commandActionDependency = new CommandActionDependency();
            commandActionDependency.CommandActionID = commandActionID;
            commandActionDependency.DependencyID = dependencyID;
            commandActionDependency.DependencyOrder = dependencyOrder;
            return commandActionDependency;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CommandActionID
        {
            get
            {
                return _CommandActionID;
            }
            set
            {
                if (_CommandActionID != value)
                {
                    OnCommandActionIDChanging(value);
                    ReportPropertyChanging("CommandActionID");
                    _CommandActionID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CommandActionID");
                    OnCommandActionIDChanged();
                }
            }
        }
        private global::System.Int32 _CommandActionID;
        partial void OnCommandActionIDChanging(global::System.Int32 value);
        partial void OnCommandActionIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DependencyID
        {
            get
            {
                return _DependencyID;
            }
            set
            {
                if (_DependencyID != value)
                {
                    OnDependencyIDChanging(value);
                    ReportPropertyChanging("DependencyID");
                    _DependencyID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DependencyID");
                    OnDependencyIDChanged();
                }
            }
        }
        private global::System.Int32 _DependencyID;
        partial void OnDependencyIDChanging(global::System.Int32 value);
        partial void OnDependencyIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DependencyOrder
        {
            get
            {
                return _DependencyOrder;
            }
            set
            {
                OnDependencyOrderChanging(value);
                ReportPropertyChanging("DependencyOrder");
                _DependencyOrder = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DependencyOrder");
                OnDependencyOrderChanged();
            }
        }
        private global::System.Int32 _DependencyOrder;
        partial void OnDependencyOrderChanging(global::System.Int32 value);
        partial void OnDependencyOrderChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FailResponseMessage
        {
            get
            {
                return _FailResponseMessage;
            }
            set
            {
                OnFailResponseMessageChanging(value);
                ReportPropertyChanging("FailResponseMessage");
                _FailResponseMessage = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FailResponseMessage");
                OnFailResponseMessageChanged();
            }
        }
        private global::System.String _FailResponseMessage;
        partial void OnFailResponseMessageChanging(global::System.String value);
        partial void OnFailResponseMessageChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_CommandActionDependency_CommandAction", "CommandAction")]
        public CommandAction CommandAction
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CommandAction>("AdventureModel.FK_CommandActionDependency_CommandAction", "CommandAction").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CommandAction>("AdventureModel.FK_CommandActionDependency_CommandAction", "CommandAction").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CommandAction> CommandActionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CommandAction>("AdventureModel.FK_CommandActionDependency_CommandAction", "CommandAction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CommandAction>("AdventureModel.FK_CommandActionDependency_CommandAction", "CommandAction", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_CommandActionDependency_Dependency", "Dependency")]
        public Dependency Dependency
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Dependency>("AdventureModel.FK_CommandActionDependency_Dependency", "Dependency").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Dependency>("AdventureModel.FK_CommandActionDependency_Dependency", "Dependency").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Dependency> DependencyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Dependency>("AdventureModel.FK_CommandActionDependency_Dependency", "Dependency");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Dependency>("AdventureModel.FK_CommandActionDependency_Dependency", "Dependency", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AdventureModel", Name="CommandActionParameter")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CommandActionParameter : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CommandActionParameter object.
        /// </summary>
        /// <param name="commandActionID">Initial value of the CommandActionID property.</param>
        /// <param name="parameterID">Initial value of the ParameterID property.</param>
        /// <param name="commandActionParameterOrder">Initial value of the CommandActionParameterOrder property.</param>
        public static CommandActionParameter CreateCommandActionParameter(global::System.Int32 commandActionID, global::System.Guid parameterID, global::System.Int32 commandActionParameterOrder)
        {
            CommandActionParameter commandActionParameter = new CommandActionParameter();
            commandActionParameter.CommandActionID = commandActionID;
            commandActionParameter.ParameterID = parameterID;
            commandActionParameter.CommandActionParameterOrder = commandActionParameterOrder;
            return commandActionParameter;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CommandActionID
        {
            get
            {
                return _CommandActionID;
            }
            set
            {
                if (_CommandActionID != value)
                {
                    OnCommandActionIDChanging(value);
                    ReportPropertyChanging("CommandActionID");
                    _CommandActionID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CommandActionID");
                    OnCommandActionIDChanged();
                }
            }
        }
        private global::System.Int32 _CommandActionID;
        partial void OnCommandActionIDChanging(global::System.Int32 value);
        partial void OnCommandActionIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ParameterID
        {
            get
            {
                return _ParameterID;
            }
            set
            {
                if (_ParameterID != value)
                {
                    OnParameterIDChanging(value);
                    ReportPropertyChanging("ParameterID");
                    _ParameterID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ParameterID");
                    OnParameterIDChanged();
                }
            }
        }
        private global::System.Guid _ParameterID;
        partial void OnParameterIDChanging(global::System.Guid value);
        partial void OnParameterIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CommandActionParameterOrder
        {
            get
            {
                return _CommandActionParameterOrder;
            }
            set
            {
                OnCommandActionParameterOrderChanging(value);
                ReportPropertyChanging("CommandActionParameterOrder");
                _CommandActionParameterOrder = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CommandActionParameterOrder");
                OnCommandActionParameterOrderChanged();
            }
        }
        private global::System.Int32 _CommandActionParameterOrder;
        partial void OnCommandActionParameterOrderChanging(global::System.Int32 value);
        partial void OnCommandActionParameterOrderChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_CommandActionParameter_CommandAction", "CommandAction")]
        public CommandAction CommandAction
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CommandAction>("AdventureModel.FK_CommandActionParameter_CommandAction", "CommandAction").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CommandAction>("AdventureModel.FK_CommandActionParameter_CommandAction", "CommandAction").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CommandAction> CommandActionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CommandAction>("AdventureModel.FK_CommandActionParameter_CommandAction", "CommandAction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CommandAction>("AdventureModel.FK_CommandActionParameter_CommandAction", "CommandAction", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AdventureModel", Name="CommandParameterType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CommandParameterType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CommandParameterType object.
        /// </summary>
        /// <param name="commandID">Initial value of the CommandID property.</param>
        /// <param name="parameterTypeID">Initial value of the ParameterTypeID property.</param>
        /// <param name="commandParameterOrder">Initial value of the CommandParameterOrder property.</param>
        public static CommandParameterType CreateCommandParameterType(global::System.Int32 commandID, global::System.Int32 parameterTypeID, global::System.Int32 commandParameterOrder)
        {
            CommandParameterType commandParameterType = new CommandParameterType();
            commandParameterType.CommandID = commandID;
            commandParameterType.ParameterTypeID = parameterTypeID;
            commandParameterType.CommandParameterOrder = commandParameterOrder;
            return commandParameterType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CommandID
        {
            get
            {
                return _CommandID;
            }
            set
            {
                if (_CommandID != value)
                {
                    OnCommandIDChanging(value);
                    ReportPropertyChanging("CommandID");
                    _CommandID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CommandID");
                    OnCommandIDChanged();
                }
            }
        }
        private global::System.Int32 _CommandID;
        partial void OnCommandIDChanging(global::System.Int32 value);
        partial void OnCommandIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ParameterTypeID
        {
            get
            {
                return _ParameterTypeID;
            }
            set
            {
                if (_ParameterTypeID != value)
                {
                    OnParameterTypeIDChanging(value);
                    ReportPropertyChanging("ParameterTypeID");
                    _ParameterTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ParameterTypeID");
                    OnParameterTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _ParameterTypeID;
        partial void OnParameterTypeIDChanging(global::System.Int32 value);
        partial void OnParameterTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CommandParameterOrder
        {
            get
            {
                return _CommandParameterOrder;
            }
            set
            {
                OnCommandParameterOrderChanging(value);
                ReportPropertyChanging("CommandParameterOrder");
                _CommandParameterOrder = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CommandParameterOrder");
                OnCommandParameterOrderChanged();
            }
        }
        private global::System.Int32 _CommandParameterOrder;
        partial void OnCommandParameterOrderChanging(global::System.Int32 value);
        partial void OnCommandParameterOrderChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_CommandParameterType_Command", "Command")]
        public Command Command
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Command>("AdventureModel.FK_CommandParameterType_Command", "Command").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Command>("AdventureModel.FK_CommandParameterType_Command", "Command").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Command> CommandReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Command>("AdventureModel.FK_CommandParameterType_Command", "Command");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Command>("AdventureModel.FK_CommandParameterType_Command", "Command", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_CommandParameterType_ParameterType", "ParameterType")]
        public ParameterType ParameterType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ParameterType>("AdventureModel.FK_CommandParameterType_ParameterType", "ParameterType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ParameterType>("AdventureModel.FK_CommandParameterType_ParameterType", "ParameterType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ParameterType> ParameterTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ParameterType>("AdventureModel.FK_CommandParameterType_ParameterType", "ParameterType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ParameterType>("AdventureModel.FK_CommandParameterType_ParameterType", "ParameterType", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AdventureModel", Name="CommandResponseReason")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CommandResponseReason : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CommandResponseReason object.
        /// </summary>
        /// <param name="commandResponseReasonID">Initial value of the CommandResponseReasonID property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        public static CommandResponseReason CreateCommandResponseReason(global::System.Int32 commandResponseReasonID, global::System.String description)
        {
            CommandResponseReason commandResponseReason = new CommandResponseReason();
            commandResponseReason.CommandResponseReasonID = commandResponseReasonID;
            commandResponseReason.Description = description;
            return commandResponseReason;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CommandResponseReasonID
        {
            get
            {
                return _CommandResponseReasonID;
            }
            set
            {
                if (_CommandResponseReasonID != value)
                {
                    OnCommandResponseReasonIDChanging(value);
                    ReportPropertyChanging("CommandResponseReasonID");
                    _CommandResponseReasonID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CommandResponseReasonID");
                    OnCommandResponseReasonIDChanged();
                }
            }
        }
        private global::System.Int32 _CommandResponseReasonID;
        partial void OnCommandResponseReasonIDChanging(global::System.Int32 value);
        partial void OnCommandResponseReasonIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AdventureModel", Name="CommandType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CommandType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CommandType object.
        /// </summary>
        /// <param name="commandTypeID">Initial value of the CommandTypeID property.</param>
        /// <param name="commandTypeName">Initial value of the CommandTypeName property.</param>
        public static CommandType CreateCommandType(global::System.Int32 commandTypeID, global::System.String commandTypeName)
        {
            CommandType commandType = new CommandType();
            commandType.CommandTypeID = commandTypeID;
            commandType.CommandTypeName = commandTypeName;
            return commandType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CommandTypeID
        {
            get
            {
                return _CommandTypeID;
            }
            set
            {
                if (_CommandTypeID != value)
                {
                    OnCommandTypeIDChanging(value);
                    ReportPropertyChanging("CommandTypeID");
                    _CommandTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CommandTypeID");
                    OnCommandTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _CommandTypeID;
        partial void OnCommandTypeIDChanging(global::System.Int32 value);
        partial void OnCommandTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CommandTypeName
        {
            get
            {
                return _CommandTypeName;
            }
            set
            {
                OnCommandTypeNameChanging(value);
                ReportPropertyChanging("CommandTypeName");
                _CommandTypeName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CommandTypeName");
                OnCommandTypeNameChanged();
            }
        }
        private global::System.String _CommandTypeName;
        partial void OnCommandTypeNameChanging(global::System.String value);
        partial void OnCommandTypeNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_Command_CommandType", "Command")]
        public EntityCollection<Command> Commands
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Command>("AdventureModel.FK_Command_CommandType", "Command");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Command>("AdventureModel.FK_Command_CommandType", "Command", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AdventureModel", Name="Dependency")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Dependency : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Dependency object.
        /// </summary>
        /// <param name="dependencyID">Initial value of the DependencyID property.</param>
        /// <param name="dependencyTypeID">Initial value of the DependencyTypeID property.</param>
        public static Dependency CreateDependency(global::System.Int32 dependencyID, global::System.Int32 dependencyTypeID)
        {
            Dependency dependency = new Dependency();
            dependency.DependencyID = dependencyID;
            dependency.DependencyTypeID = dependencyTypeID;
            return dependency;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DependencyID
        {
            get
            {
                return _DependencyID;
            }
            set
            {
                if (_DependencyID != value)
                {
                    OnDependencyIDChanging(value);
                    ReportPropertyChanging("DependencyID");
                    _DependencyID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DependencyID");
                    OnDependencyIDChanged();
                }
            }
        }
        private global::System.Int32 _DependencyID;
        partial void OnDependencyIDChanging(global::System.Int32 value);
        partial void OnDependencyIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DependencyTypeID
        {
            get
            {
                return _DependencyTypeID;
            }
            set
            {
                OnDependencyTypeIDChanging(value);
                ReportPropertyChanging("DependencyTypeID");
                _DependencyTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DependencyTypeID");
                OnDependencyTypeIDChanged();
            }
        }
        private global::System.Int32 _DependencyTypeID;
        partial void OnDependencyTypeIDChanging(global::System.Int32 value);
        partial void OnDependencyTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> DependencyElementID
        {
            get
            {
                return _DependencyElementID;
            }
            set
            {
                OnDependencyElementIDChanging(value);
                ReportPropertyChanging("DependencyElementID");
                _DependencyElementID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DependencyElementID");
                OnDependencyElementIDChanged();
            }
        }
        private Nullable<global::System.Guid> _DependencyElementID;
        partial void OnDependencyElementIDChanging(Nullable<global::System.Guid> value);
        partial void OnDependencyElementIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DependencyElementKey
        {
            get
            {
                return _DependencyElementKey;
            }
            set
            {
                OnDependencyElementKeyChanging(value);
                ReportPropertyChanging("DependencyElementKey");
                _DependencyElementKey = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DependencyElementKey");
                OnDependencyElementKeyChanged();
            }
        }
        private global::System.String _DependencyElementKey;
        partial void OnDependencyElementKeyChanging(global::System.String value);
        partial void OnDependencyElementKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DependencyElementValue
        {
            get
            {
                return _DependencyElementValue;
            }
            set
            {
                OnDependencyElementValueChanging(value);
                ReportPropertyChanging("DependencyElementValue");
                _DependencyElementValue = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DependencyElementValue");
                OnDependencyElementValueChanged();
            }
        }
        private global::System.String _DependencyElementValue;
        partial void OnDependencyElementValueChanging(global::System.String value);
        partial void OnDependencyElementValueChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_CommandActionDependency_Dependency", "CommandActionDependency")]
        public EntityCollection<CommandActionDependency> CommandActionDependencies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CommandActionDependency>("AdventureModel.FK_CommandActionDependency_Dependency", "CommandActionDependency");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CommandActionDependency>("AdventureModel.FK_CommandActionDependency_Dependency", "CommandActionDependency", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_Dependency_DependencyType", "DependencyType")]
        public DependencyType DependencyType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DependencyType>("AdventureModel.FK_Dependency_DependencyType", "DependencyType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DependencyType>("AdventureModel.FK_Dependency_DependencyType", "DependencyType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DependencyType> DependencyTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DependencyType>("AdventureModel.FK_Dependency_DependencyType", "DependencyType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DependencyType>("AdventureModel.FK_Dependency_DependencyType", "DependencyType", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AdventureModel", Name="DependencyType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DependencyType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new DependencyType object.
        /// </summary>
        /// <param name="dependencyTypeID">Initial value of the DependencyTypeID property.</param>
        /// <param name="dependencyName">Initial value of the DependencyName property.</param>
        public static DependencyType CreateDependencyType(global::System.Int32 dependencyTypeID, global::System.String dependencyName)
        {
            DependencyType dependencyType = new DependencyType();
            dependencyType.DependencyTypeID = dependencyTypeID;
            dependencyType.DependencyName = dependencyName;
            return dependencyType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DependencyTypeID
        {
            get
            {
                return _DependencyTypeID;
            }
            set
            {
                if (_DependencyTypeID != value)
                {
                    OnDependencyTypeIDChanging(value);
                    ReportPropertyChanging("DependencyTypeID");
                    _DependencyTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DependencyTypeID");
                    OnDependencyTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _DependencyTypeID;
        partial void OnDependencyTypeIDChanging(global::System.Int32 value);
        partial void OnDependencyTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DependencyName
        {
            get
            {
                return _DependencyName;
            }
            set
            {
                OnDependencyNameChanging(value);
                ReportPropertyChanging("DependencyName");
                _DependencyName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("DependencyName");
                OnDependencyNameChanged();
            }
        }
        private global::System.String _DependencyName;
        partial void OnDependencyNameChanging(global::System.String value);
        partial void OnDependencyNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_Dependency_DependencyType", "Dependency")]
        public EntityCollection<Dependency> Dependencies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Dependency>("AdventureModel.FK_Dependency_DependencyType", "Dependency");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Dependency>("AdventureModel.FK_Dependency_DependencyType", "Dependency", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AdventureModel", Name="Direction")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Direction : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Direction object.
        /// </summary>
        /// <param name="directionID">Initial value of the DirectionID property.</param>
        /// <param name="directionName">Initial value of the DirectionName property.</param>
        /// <param name="shortName">Initial value of the ShortName property.</param>
        public static Direction CreateDirection(global::System.Guid directionID, global::System.String directionName, global::System.String shortName)
        {
            Direction direction = new Direction();
            direction.DirectionID = directionID;
            direction.DirectionName = directionName;
            direction.ShortName = shortName;
            return direction;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid DirectionID
        {
            get
            {
                return _DirectionID;
            }
            set
            {
                if (_DirectionID != value)
                {
                    OnDirectionIDChanging(value);
                    ReportPropertyChanging("DirectionID");
                    _DirectionID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DirectionID");
                    OnDirectionIDChanged();
                }
            }
        }
        private global::System.Guid _DirectionID;
        partial void OnDirectionIDChanging(global::System.Guid value);
        partial void OnDirectionIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DirectionName
        {
            get
            {
                return _DirectionName;
            }
            set
            {
                OnDirectionNameChanging(value);
                ReportPropertyChanging("DirectionName");
                _DirectionName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("DirectionName");
                OnDirectionNameChanged();
            }
        }
        private global::System.String _DirectionName;
        partial void OnDirectionNameChanging(global::System.String value);
        partial void OnDirectionNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ShortName
        {
            get
            {
                return _ShortName;
            }
            set
            {
                OnShortNameChanging(value);
                ReportPropertyChanging("ShortName");
                _ShortName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ShortName");
                OnShortNameChanged();
            }
        }
        private global::System.String _ShortName;
        partial void OnShortNameChanging(global::System.String value);
        partial void OnShortNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_LocationDirection_Direction", "LocationDirection")]
        public EntityCollection<LocationDirection> LocationDirections
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LocationDirection>("AdventureModel.FK_LocationDirection_Direction", "LocationDirection");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LocationDirection>("AdventureModel.FK_LocationDirection_Direction", "LocationDirection", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AdventureModel", Name="Game")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Game : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Game object.
        /// </summary>
        /// <param name="gameID">Initial value of the GameID property.</param>
        /// <param name="ownerID">Initial value of the OwnerID property.</param>
        /// <param name="title">Initial value of the Title property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        /// <param name="dateAdded">Initial value of the DateAdded property.</param>
        public static Game CreateGame(global::System.Guid gameID, global::System.Int32 ownerID, global::System.String title, global::System.String description, global::System.DateTime dateAdded)
        {
            Game game = new Game();
            game.GameID = gameID;
            game.OwnerID = ownerID;
            game.Title = title;
            game.Description = description;
            game.DateAdded = dateAdded;
            return game;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid GameID
        {
            get
            {
                return _GameID;
            }
            set
            {
                if (_GameID != value)
                {
                    OnGameIDChanging(value);
                    ReportPropertyChanging("GameID");
                    _GameID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GameID");
                    OnGameIDChanged();
                }
            }
        }
        private global::System.Guid _GameID;
        partial void OnGameIDChanging(global::System.Guid value);
        partial void OnGameIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 OwnerID
        {
            get
            {
                return _OwnerID;
            }
            set
            {
                OnOwnerIDChanging(value);
                ReportPropertyChanging("OwnerID");
                _OwnerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OwnerID");
                OnOwnerIDChanged();
            }
        }
        private global::System.Int32 _OwnerID;
        partial void OnOwnerIDChanging(global::System.Int32 value);
        partial void OnOwnerIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateAdded
        {
            get
            {
                return _DateAdded;
            }
            set
            {
                OnDateAddedChanging(value);
                ReportPropertyChanging("DateAdded");
                _DateAdded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateAdded");
                OnDateAddedChanged();
            }
        }
        private global::System.DateTime _DateAdded;
        partial void OnDateAddedChanging(global::System.DateTime value);
        partial void OnDateAddedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> StartLocationID
        {
            get
            {
                return _StartLocationID;
            }
            set
            {
                OnStartLocationIDChanging(value);
                ReportPropertyChanging("StartLocationID");
                _StartLocationID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartLocationID");
                OnStartLocationIDChanged();
            }
        }
        private Nullable<global::System.Guid> _StartLocationID;
        partial void OnStartLocationIDChanging(Nullable<global::System.Guid> value);
        partial void OnStartLocationIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_CommandAction_Game", "CommandAction")]
        public EntityCollection<CommandAction> CommandActions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CommandAction>("AdventureModel.FK_CommandAction_Game", "CommandAction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CommandAction>("AdventureModel.FK_CommandAction_Game", "CommandAction", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_Location_Game", "Location")]
        public EntityCollection<Location> Locations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Location>("AdventureModel.FK_Location_Game", "Location");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Location>("AdventureModel.FK_Location_Game", "Location", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AdventureModel", Name="Location")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Location : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Location object.
        /// </summary>
        /// <param name="locationID">Initial value of the LocationID property.</param>
        /// <param name="gameID">Initial value of the GameID property.</param>
        /// <param name="locationName">Initial value of the LocationName property.</param>
        /// <param name="locationDescription">Initial value of the LocationDescription property.</param>
        public static Location CreateLocation(global::System.Guid locationID, global::System.Guid gameID, global::System.String locationName, global::System.String locationDescription)
        {
            Location location = new Location();
            location.LocationID = locationID;
            location.GameID = gameID;
            location.LocationName = locationName;
            location.LocationDescription = locationDescription;
            return location;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid LocationID
        {
            get
            {
                return _LocationID;
            }
            set
            {
                if (_LocationID != value)
                {
                    OnLocationIDChanging(value);
                    ReportPropertyChanging("LocationID");
                    _LocationID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LocationID");
                    OnLocationIDChanged();
                }
            }
        }
        private global::System.Guid _LocationID;
        partial void OnLocationIDChanging(global::System.Guid value);
        partial void OnLocationIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid GameID
        {
            get
            {
                return _GameID;
            }
            set
            {
                OnGameIDChanging(value);
                ReportPropertyChanging("GameID");
                _GameID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("GameID");
                OnGameIDChanged();
            }
        }
        private global::System.Guid _GameID;
        partial void OnGameIDChanging(global::System.Guid value);
        partial void OnGameIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LocationName
        {
            get
            {
                return _LocationName;
            }
            set
            {
                OnLocationNameChanging(value);
                ReportPropertyChanging("LocationName");
                _LocationName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LocationName");
                OnLocationNameChanged();
            }
        }
        private global::System.String _LocationName;
        partial void OnLocationNameChanging(global::System.String value);
        partial void OnLocationNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LocationDescription
        {
            get
            {
                return _LocationDescription;
            }
            set
            {
                OnLocationDescriptionChanging(value);
                ReportPropertyChanging("LocationDescription");
                _LocationDescription = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LocationDescription");
                OnLocationDescriptionChanged();
            }
        }
        private global::System.String _LocationDescription;
        partial void OnLocationDescriptionChanging(global::System.String value);
        partial void OnLocationDescriptionChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_Location_Game", "Game")]
        public Game Game
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("AdventureModel.FK_Location_Game", "Game").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("AdventureModel.FK_Location_Game", "Game").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Game> GameReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("AdventureModel.FK_Location_Game", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Game>("AdventureModel.FK_Location_Game", "Game", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_LocationDirection_Location", "LocationDirection")]
        public EntityCollection<LocationDirection> LocationDirections
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LocationDirection>("AdventureModel.FK_LocationDirection_Location", "LocationDirection");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LocationDirection>("AdventureModel.FK_LocationDirection_Location", "LocationDirection", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_LocationDirection_Location1", "LocationDirection")]
        public EntityCollection<LocationDirection> LocationDirections1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LocationDirection>("AdventureModel.FK_LocationDirection_Location1", "LocationDirection");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LocationDirection>("AdventureModel.FK_LocationDirection_Location1", "LocationDirection", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_LocationItem_Location", "LocationItem")]
        public EntityCollection<LocationItem> LocationItems
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LocationItem>("AdventureModel.FK_LocationItem_Location", "LocationItem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LocationItem>("AdventureModel.FK_LocationItem_Location", "LocationItem", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AdventureModel", Name="LocationDirection")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LocationDirection : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new LocationDirection object.
        /// </summary>
        /// <param name="sourceLocationID">Initial value of the SourceLocationID property.</param>
        /// <param name="targetLocationID">Initial value of the TargetLocationID property.</param>
        /// <param name="directionID">Initial value of the DirectionID property.</param>
        public static LocationDirection CreateLocationDirection(global::System.Guid sourceLocationID, global::System.Guid targetLocationID, global::System.Guid directionID)
        {
            LocationDirection locationDirection = new LocationDirection();
            locationDirection.SourceLocationID = sourceLocationID;
            locationDirection.TargetLocationID = targetLocationID;
            locationDirection.DirectionID = directionID;
            return locationDirection;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SourceLocationID
        {
            get
            {
                return _SourceLocationID;
            }
            set
            {
                if (_SourceLocationID != value)
                {
                    OnSourceLocationIDChanging(value);
                    ReportPropertyChanging("SourceLocationID");
                    _SourceLocationID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SourceLocationID");
                    OnSourceLocationIDChanged();
                }
            }
        }
        private global::System.Guid _SourceLocationID;
        partial void OnSourceLocationIDChanging(global::System.Guid value);
        partial void OnSourceLocationIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid TargetLocationID
        {
            get
            {
                return _TargetLocationID;
            }
            set
            {
                if (_TargetLocationID != value)
                {
                    OnTargetLocationIDChanging(value);
                    ReportPropertyChanging("TargetLocationID");
                    _TargetLocationID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TargetLocationID");
                    OnTargetLocationIDChanged();
                }
            }
        }
        private global::System.Guid _TargetLocationID;
        partial void OnTargetLocationIDChanging(global::System.Guid value);
        partial void OnTargetLocationIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid DirectionID
        {
            get
            {
                return _DirectionID;
            }
            set
            {
                if (_DirectionID != value)
                {
                    OnDirectionIDChanging(value);
                    ReportPropertyChanging("DirectionID");
                    _DirectionID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DirectionID");
                    OnDirectionIDChanged();
                }
            }
        }
        private global::System.Guid _DirectionID;
        partial void OnDirectionIDChanging(global::System.Guid value);
        partial void OnDirectionIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_LocationDirection_Direction", "Direction")]
        public Direction Direction
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Direction>("AdventureModel.FK_LocationDirection_Direction", "Direction").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Direction>("AdventureModel.FK_LocationDirection_Direction", "Direction").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Direction> DirectionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Direction>("AdventureModel.FK_LocationDirection_Direction", "Direction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Direction>("AdventureModel.FK_LocationDirection_Direction", "Direction", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_LocationDirection_Location", "Location")]
        public Location Location
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Location>("AdventureModel.FK_LocationDirection_Location", "Location").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Location>("AdventureModel.FK_LocationDirection_Location", "Location").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Location> LocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Location>("AdventureModel.FK_LocationDirection_Location", "Location");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Location>("AdventureModel.FK_LocationDirection_Location", "Location", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_LocationDirection_Location1", "Location")]
        public Location Location1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Location>("AdventureModel.FK_LocationDirection_Location1", "Location").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Location>("AdventureModel.FK_LocationDirection_Location1", "Location").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Location> Location1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Location>("AdventureModel.FK_LocationDirection_Location1", "Location");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Location>("AdventureModel.FK_LocationDirection_Location1", "Location", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AdventureModel", Name="LocationItem")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LocationItem : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new LocationItem object.
        /// </summary>
        /// <param name="locationID">Initial value of the LocationID property.</param>
        /// <param name="itemID">Initial value of the ItemID property.</param>
        public static LocationItem CreateLocationItem(global::System.Guid locationID, global::System.Guid itemID)
        {
            LocationItem locationItem = new LocationItem();
            locationItem.LocationID = locationID;
            locationItem.ItemID = itemID;
            return locationItem;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid LocationID
        {
            get
            {
                return _LocationID;
            }
            set
            {
                if (_LocationID != value)
                {
                    OnLocationIDChanging(value);
                    ReportPropertyChanging("LocationID");
                    _LocationID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LocationID");
                    OnLocationIDChanged();
                }
            }
        }
        private global::System.Guid _LocationID;
        partial void OnLocationIDChanging(global::System.Guid value);
        partial void OnLocationIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ItemID
        {
            get
            {
                return _ItemID;
            }
            set
            {
                if (_ItemID != value)
                {
                    OnItemIDChanging(value);
                    ReportPropertyChanging("ItemID");
                    _ItemID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ItemID");
                    OnItemIDChanged();
                }
            }
        }
        private global::System.Guid _ItemID;
        partial void OnItemIDChanging(global::System.Guid value);
        partial void OnItemIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_LocationItem_Location", "Location")]
        public Location Location
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Location>("AdventureModel.FK_LocationItem_Location", "Location").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Location>("AdventureModel.FK_LocationItem_Location", "Location").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Location> LocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Location>("AdventureModel.FK_LocationItem_Location", "Location");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Location>("AdventureModel.FK_LocationItem_Location", "Location", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AdventureModel", Name="ParameterType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ParameterType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ParameterType object.
        /// </summary>
        /// <param name="parameterTypeID">Initial value of the ParameterTypeID property.</param>
        /// <param name="parameterTypeName">Initial value of the ParameterTypeName property.</param>
        public static ParameterType CreateParameterType(global::System.Int32 parameterTypeID, global::System.String parameterTypeName)
        {
            ParameterType parameterType = new ParameterType();
            parameterType.ParameterTypeID = parameterTypeID;
            parameterType.ParameterTypeName = parameterTypeName;
            return parameterType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ParameterTypeID
        {
            get
            {
                return _ParameterTypeID;
            }
            set
            {
                if (_ParameterTypeID != value)
                {
                    OnParameterTypeIDChanging(value);
                    ReportPropertyChanging("ParameterTypeID");
                    _ParameterTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ParameterTypeID");
                    OnParameterTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _ParameterTypeID;
        partial void OnParameterTypeIDChanging(global::System.Int32 value);
        partial void OnParameterTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ParameterTypeName
        {
            get
            {
                return _ParameterTypeName;
            }
            set
            {
                OnParameterTypeNameChanging(value);
                ReportPropertyChanging("ParameterTypeName");
                _ParameterTypeName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ParameterTypeName");
                OnParameterTypeNameChanged();
            }
        }
        private global::System.String _ParameterTypeName;
        partial void OnParameterTypeNameChanging(global::System.String value);
        partial void OnParameterTypeNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AdventureModel", "FK_CommandParameterType_ParameterType", "CommandParameterType")]
        public EntityCollection<CommandParameterType> CommandParameterTypes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CommandParameterType>("AdventureModel.FK_CommandParameterType_ParameterType", "CommandParameterType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CommandParameterType>("AdventureModel.FK_CommandParameterType_ParameterType", "CommandParameterType", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AdventureModel", Name="PropertyDataType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PropertyDataType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PropertyDataType object.
        /// </summary>
        /// <param name="propertyDataTypeID">Initial value of the PropertyDataTypeID property.</param>
        /// <param name="typeName">Initial value of the TypeName property.</param>
        public static PropertyDataType CreatePropertyDataType(global::System.Int32 propertyDataTypeID, global::System.String typeName)
        {
            PropertyDataType propertyDataType = new PropertyDataType();
            propertyDataType.PropertyDataTypeID = propertyDataTypeID;
            propertyDataType.TypeName = typeName;
            return propertyDataType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PropertyDataTypeID
        {
            get
            {
                return _PropertyDataTypeID;
            }
            set
            {
                if (_PropertyDataTypeID != value)
                {
                    OnPropertyDataTypeIDChanging(value);
                    ReportPropertyChanging("PropertyDataTypeID");
                    _PropertyDataTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PropertyDataTypeID");
                    OnPropertyDataTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _PropertyDataTypeID;
        partial void OnPropertyDataTypeIDChanging(global::System.Int32 value);
        partial void OnPropertyDataTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TypeName
        {
            get
            {
                return _TypeName;
            }
            set
            {
                OnTypeNameChanging(value);
                ReportPropertyChanging("TypeName");
                _TypeName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TypeName");
                OnTypeNameChanged();
            }
        }
        private global::System.String _TypeName;
        partial void OnTypeNameChanging(global::System.String value);
        partial void OnTypeNameChanged();

        #endregion

    
    }

    #endregion

    
}
